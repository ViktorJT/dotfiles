Project Path: dotfiles

Source Tree:

```
dotfiles
├── environments
│   ├── macos
│   │   ├── Raycast.rayconfig
│   │   ├── defaults.sh
│   │   ├── dependencies.sh
│   │   ├── macos-keyboard-shortcuts.xml
│   │   ├── zsh.aliases
│   │   ├── zsh.configuration
│   │   ├── zsh.functions
│   │   └── zsh.plugins
│   ├── _common
│   ├── web-dev
│   │   └── home
│   └── data-science
│       └── home
├── host
│   └── home
│       ├── nvim
│       │   ├── LICENSE
│       │   ├── README.md
│       │   ├── init.lua
│       │   ├── lazy-lock.json
│       │   └── lua
│       │       ├── chadrc.lua
│       │       ├── configs
│       │       │   ├── comment.lua
│       │       │   ├── commentstring.lua
│       │       │   ├── conform.lua
│       │       │   ├── gitsigns.lua
│       │       │   ├── lazy.lua
│       │       │   ├── lspconfig.lua
│       │       │   ├── mason.lua
│       │       │   ├── nvim-lint.lua
│       │       │   ├── nvim-tree.lua
│       │       │   └── treesitter.lua
│       │       ├── mappings.lua
│       │       ├── options.lua
│       │       └── plugins
│       │           └── init.lua
│       ├── starship.toml
│       ├── wezterm
│       │   └── wezterm.lua
│       └── dot_zshrc.tmpl
├── scripts
│   └── setup-container.sh
├── machine
│   └── home
│       ├── dot_zshrc.tmpl
│       ├── nvim
│       │   ├── LICENSE
│       │   ├── README.md
│       │   ├── init.lua
│       │   ├── lazy-lock.json
│       │   └── lua
│       │       ├── chadrc.lua
│       │       ├── configs
│       │       │   ├── comment.lua
│       │       │   ├── commentstring.lua
│       │       │   ├── conform.lua
│       │       │   ├── gitsigns.lua
│       │       │   ├── lazy.lua
│       │       │   ├── lspconfig.lua
│       │       │   ├── mason.lua
│       │       │   ├── nvim-lint.lua
│       │       │   ├── nvim-tree.lua
│       │       │   └── treesitter.lua
│       │       ├── mappings.lua
│       │       ├── options.lua
│       │       └── plugins
│       │           └── init.lua
│       ├── starship.toml
│       └── wezterm
│           └── wezterm.lua
├── containers
│   ├── web-dev
│   │   └── home
│   └── data-science
│       └── home
└── README.md

```

`/dotfiles/environments/macos/defaults.sh`:

```sh
#!/bin/bash
# macOS system defaults setup

echo "🔧 Configuring macOS system defaults..."

# Ask for the administrator password upfront
sudo -v

# Keep-alive: update existing `sudo` time stamp until this script has finished
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

###############################################################################
# General UI/UX                                                               #
###############################################################################

# Set computer name (as done via System Preferences → Sharing)
sudo scutil --set ComputerName "MacBook"
sudo scutil --set HostName "MacBook"
sudo scutil --set LocalHostName "MacBook"
sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.smb.server NetBIOSName -string "MacBook"

# Disable the sound effects on boot
sudo nvram SystemAudioVolume=" "

# Always show scrollbars
defaults write NSGlobalDomain AppleShowScrollBars -string "Always"

# Save to disk (not to iCloud) by default
defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false

# Automatically quit printer app once the print jobs complete
defaults write com.apple.print.PrintingPrefs "Quit When Finished" -bool true

###############################################################################
# Trackpad, mouse, keyboard, Bluetooth accessories, and input                 #
###############################################################################

# Trackpad: enable tap to click for this user and for the login screen
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1

# Trackpad: map bottom right corner to right-click
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadCornerSecondaryClick -int 2
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadRightClick -bool true
defaults -currentHost write NSGlobalDomain com.apple.trackpad.trackpadCornerClickBehavior -int 1
defaults -currentHost write NSGlobalDomain com.apple.trackpad.enableSecondaryClick -bool true

# Set a blazingly fast keyboard repeat rate
defaults write NSGlobalDomain KeyRepeat -int 1
defaults write NSGlobalDomain InitialKeyRepeat -int 10

# Set language and text formats
defaults write NSGlobalDomain AppleLanguages -array "en"
defaults write NSGlobalDomain AppleLocale -string "en_US@currency=USD"
defaults write NSGlobalDomain AppleMeasurementUnits -string "Inches"
defaults write NSGlobalDomain AppleMetricUnits -bool false

###############################################################################
# Finder                                                                      #
###############################################################################

# Show hidden files by default
defaults write com.apple.finder AppleShowAllFiles -bool true

# Show all filename extensions
defaults write NSGlobalDomain AppleShowAllExtensions -bool true

# Show status bar
defaults write com.apple.finder ShowStatusBar -bool true

# Show path bar
defaults write com.apple.finder ShowPathbar -bool true

# Display full POSIX path as Finder window title
defaults write com.apple.finder _FXShowPosixPathInTitle -bool true

# Keep folders on top when sorting by name
defaults write com.apple.finder _FXSortFoldersFirst -bool true

# When performing a search, search the current folder by default
defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"

# Disable the warning when changing a file extension
defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false

# Avoid creating .DS_Store files on network or USB volumes
defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
defaults write com.apple.desktopservices DSDontWriteUSBStores -bool true

# Use list view in all Finder windows by default
defaults write com.apple.finder FXPreferredViewStyle -string "Nlsv"

##############################################################################
# Dock, Dashboard, and hot corners                                            #
###############################################################################

# Set the icon size of Dock items
defaults write com.apple.dock tilesize -int 46

# Change minimize/maximize window effect
defaults write com.apple.dock mineffect -string "scale"

# Minimize windows into their application's icon
defaults write com.apple.dock minimize-to-application -bool true

# Show indicator lights for open applications in the Dock
defaults write com.apple.dock show-process-indicators -bool true

# Don't automatically rearrange Spaces based on most recent use
defaults write com.apple.dock mru-spaces -bool false

# Remove the auto-hiding Dock delay
defaults write com.apple.dock autohide-delay -float 0

# Remove the animation when hiding/showing the Dock
defaults write com.apple.dock autohide-time-modifier -float 0

# Automatically hide and show the Dock
defaults write com.apple.dock autohide -bool true

# Make Dock icons of hidden applications translucent
defaults write com.apple.dock showhidden -bool true

###############################################################################
# Terminal & iTerm 2                                                          #
###############################################################################

# Only use UTF-8 in Terminal.app
defaults write com.apple.terminal StringEncodings -array 4

# Install custom keyboard shortcuts
if [ -f "$ENVIRONMENTS_DIR/macos/macos-keyboard-shortcuts.xml" ]; then
  echo "🔄 Importing keyboard shortcuts..."
  defaults import com.apple.symbolichotkeys "$ENVIRONMENTS_DIR/macos/macos-keyboard-shortcuts.xml"
fi

# Import Raycast preferences if available
if [ -f "$ENVIRONMENTS_DIR/macos/Raycast.rayconfig" ] && [ -d "/Applications/Raycast.app" ]; then
  echo "🔄 Raycast config found. Please import manually from: $ENVIRONMENTS_DIR/macos/Raycast.rayconfig"
fi

###############################################################################
# Kill affected applications                                                  #
###############################################################################

for app in "Activity Monitor" "Address Book" "Calendar" "Contacts" "cfprefsd" \
  "Dock" "Finder" "Mail" "Messages" "Photos" "Safari" "SystemUIServer" \
  "Terminal" "iCal"; do
  killall "${app}" &> /dev/null
done

echo "✅ macOS defaults configured. Some changes require a logout/restart to take effect."#

```

`/dotfiles/environments/macos/dependencies.sh`:

```sh
#!/bin/bash
# macOS-specific dependencies installer

echo "🍎 Installing macOS-specific dependencies..."

# Check if Homebrew is installed
if ! command -v brew &>/dev/null; then
  echo "🍺 Installing Homebrew..."
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  
  # Add Homebrew to PATH based on architecture
  if [[ "$(uname -m)" == "arm64" ]]; then
    # Apple Silicon
    eval "$(/opt/homebrew/bin/brew shellenv)"
  else
    # Intel
    eval "$(/usr/local/bin/brew shellenv)"
  fi
else
  echo "✅ Homebrew already installed"
fi

# Install essential command line tools
echo "📦 Installing CLI tools..."
brew install \
  git \
  neovim \
  tmux \
  ripgrep \
  fzf \
  bat \
  exa \
  fd \
  jq \
  starship \
  zsh

# Install Oh My Zsh if not already installed
if [ ! -d "$HOME/.oh-my-zsh" ]; then
  echo "🔧 Installing Oh My Zsh..."
  sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
fi

# Install ZSH plugins
brew install zsh-autosuggestions zsh-syntax-highlighting

# Install Node.js environment
echo "📦 Installing Node.js environment..."
brew install nvm
mkdir -p "$HOME/.nvm"

# Install development applications
echo "📦 Installing development applications..."
brew install --cask \
  visual-studio-code \
  wezterm \
  iterm2 \
  raycast

# Install fonts
echo "📦 Installing fonts..."
brew tap homebrew/cask-fonts
brew install --cask font-victor-mono-nerd-font

echo "✅ macOS dependencies installed successfully!"

```

`/dotfiles/environments/macos/macos-keyboard-shortcuts.xml`:

```xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>AppleSymbolicHotKeys</key>
	<dict>
		<key>15</key>
		<dict>
			<key>enabled</key>
			<false/>
		</dict>
		<key>16</key>
		<dict>
			<key>enabled</key>
			<false/>
		</dict>
		<key>164</key>
		<dict>
			<key>enabled</key>
			<false/>
			<key>value</key>
			<dict>
				<key>parameters</key>
				<array>
					<integer>65535</integer>
					<integer>65535</integer>
					<integer>0</integer>
				</array>
				<key>type</key>
				<string>standard</string>
			</dict>
		</dict>
		<key>17</key>
		<dict>
			<key>enabled</key>
			<false/>
		</dict>
		<key>18</key>
		<dict>
			<key>enabled</key>
			<false/>
		</dict>
		<key>19</key>
		<dict>
			<key>enabled</key>
			<false/>
		</dict>
		<key>190</key>
		<dict>
			<key>enabled</key>
			<false/>
			<key>value</key>
			<dict>
				<key>parameters</key>
				<array>
					<integer>113</integer>
					<integer>12</integer>
					<integer>8388608</integer>
				</array>
				<key>type</key>
				<string>standard</string>
			</dict>
		</dict>
		<key>20</key>
		<dict>
			<key>enabled</key>
			<false/>
		</dict>
		<key>21</key>
		<dict>
			<key>enabled</key>
			<false/>
		</dict>
		<key>22</key>
		<dict>
			<key>enabled</key>
			<false/>
		</dict>
		<key>23</key>
		<dict>
			<key>enabled</key>
			<false/>
		</dict>
		<key>24</key>
		<dict>
			<key>enabled</key>
			<false/>
		</dict>
		<key>25</key>
		<dict>
			<key>enabled</key>
			<false/>
		</dict>
		<key>26</key>
		<dict>
			<key>enabled</key>
			<false/>
		</dict>
		<key>60</key>
		<dict>
			<key>enabled</key>
			<true/>
			<key>value</key>
			<dict>
				<key>parameters</key>
				<array>
					<integer>32</integer>
					<integer>49</integer>
					<integer>262144</integer>
				</array>
				<key>type</key>
				<string>standard</string>
			</dict>
		</dict>
		<key>61</key>
		<dict>
			<key>enabled</key>
			<true/>
			<key>value</key>
			<dict>
				<key>parameters</key>
				<array>
					<integer>32</integer>
					<integer>49</integer>
					<integer>1572864</integer>
				</array>
				<key>type</key>
				<string>standard</string>
			</dict>
		</dict>
		<key>64</key>
		<dict>
			<key>enabled</key>
			<false/>
			<key>value</key>
			<dict>
				<key>parameters</key>
				<array>
					<integer>32</integer>
					<integer>49</integer>
					<integer>1048576</integer>
				</array>
				<key>type</key>
				<string>standard</string>
			</dict>
		</dict>
		<key>65</key>
		<dict>
			<key>enabled</key>
			<false/>
			<key>value</key>
			<dict>
				<key>parameters</key>
				<array>
					<integer>32</integer>
					<integer>49</integer>
					<integer>1572864</integer>
				</array>
				<key>type</key>
				<string>standard</string>
			</dict>
		</dict>
		<key>79</key>
		<dict>
			<key>enabled</key>
			<true/>
		</dict>
		<key>80</key>
		<dict>
			<key>enabled</key>
			<true/>
		</dict>
		<key>81</key>
		<dict>
			<key>enabled</key>
			<true/>
		</dict>
		<key>82</key>
		<dict>
			<key>enabled</key>
			<true/>
		</dict>
	</dict>
</dict>
</plist>

```

`/dotfiles/environments/macos/zsh.aliases`:

```aliases
# macOS-specific aliases

# macOS system aliases
alias showfiles="defaults write com.apple.finder AppleShowAllFiles YES && killall Finder"
alias hidefiles="defaults write com.apple.finder AppleShowAllFiles NO && killall Finder"
alias finder="open -a Finder ."
alias cpath="pwd | tr -d '\n' | pbcopy && echo 'Path copied to clipboard'"
alias flushdns="sudo dscacheutil -flushcache; sudo killall -HUP mDNSResponder"
alias emptytrash="sudo rm -rfv /Volumes/*/.Trashes; sudo rm -rfv ~/.Trash; sudo rm -rfv /private/var/log/asl/*.asl"

# Homebrew shortcuts
alias brewup="brew update && brew upgrade && brew cleanup"
alias brewcheck="brew doctor"
alias bi="brew install"
alias bci="brew install --cask"

# Development tools
if command -v code &> /dev/null; then
  alias c="code ."
fi

# Enhanced ls commands using exa if available
if command -v exa &> /dev/null; then
  alias ls="exa --icons"
  alias ll="exa --icons -la"
  alias lt="exa --icons -T -L 2"
fi

# Quick edit common config files
alias zshconfig="chezmoi edit ~/.zshrc"
alias nvimconfig="chezmoi edit ~/.config/nvim/init.lua"

# Git shortcuts
alias gs="git status"
alias gl="git log --oneline -10"
alias gd="git diff"
alias gc="git commit -m"
alias ga="git add"
alias gp="git push"

# Open applications
alias chrome="open -a 'Google Chrome'"
alias safari="open -a Safari"
alias preview="open -a Preview"

# Python alias
alias pip="python3 -m pip"

```

`/dotfiles/environments/macos/zsh.configuration`:

```configuration
# macOS-specific configuration

# Homebrew configuration
export HOMEBREW_PREFIX="{{ .chezmoi.homeDir }}/homebrew"
if [ -d "/opt/homebrew" ]; then
  export HOMEBREW_PREFIX="/opt/homebrew"
elif [ -d "/usr/local" ]; then
  export HOMEBREW_PREFIX="/usr/local"
fi

# Enable FzF (macOS Homebrew installation)
if [ -f "$HOMEBREW_PREFIX/opt/fzf/shell/completion.zsh" ]; then
  source "$HOMEBREW_PREFIX/opt/fzf/shell/completion.zsh"
fi
if [ -f "$HOMEBREW_PREFIX/opt/fzf/shell/key-bindings.zsh" ]; then
  source "$HOMEBREW_PREFIX/opt/fzf/shell/key-bindings.zsh"
fi

# Enable NVM (macOS Homebrew installation)
export NVM_DIR="$HOME/.nvm"
[ -s "$HOMEBREW_PREFIX/opt/nvm/nvm.sh" ] && \. "$HOMEBREW_PREFIX/opt/nvm/nvm.sh" # This loads nvm
[ -s "$HOMEBREW_PREFIX/opt/nvm/etc/bash_completion.d/nvm" ] && \. "$HOMEBREW_PREFIX/opt/nvm/etc/bash_completion.d/nvm" # This loads nvm bash_completion

# Enable ZSH Autosuggestions plugin via Homebrew
source_if_exists "$HOMEBREW_PREFIX/share/zsh-autosuggestions/zsh-autosuggestions.zsh"

# Enable ZSH Syntax Highlighting plugin via Homebrew (should load last)
source_if_exists "$HOMEBREW_PREFIX/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"

# Google Cloud SDK setup (macOS specific)
source_if_exists "$HOME/google-cloud-sdk/path.zsh.inc"
source_if_exists "$HOME/google-cloud-sdk/completion.zsh.inc"

# Display welcome message
echo "🍎 macOS Environment - $(sw_vers -productName) $(sw_vers -productVersion)"

```

`/dotfiles/environments/macos/zsh.functions`:

```functions
# macOS-specific functions

# Show macOS system info
macos_info() {
  echo "🍎 macOS System Information:"
  echo "--------------------------------------"
  echo "🖥️  $(sw_vers -productName) $(sw_vers -productVersion) (Build $(sw_vers -buildVersion))"
  echo "💻 $(sysctl -n machdep.cpu.brand_string)"
  echo "🧠 RAM: $(system_profiler SPHardwareDataType | grep "Memory:" | awk '{print $2, $3}')"
  echo "💾 Disk: $(df -h / | tail -1 | awk '{print $3 " used of " $2 " total"}')"
  echo "🔋 Battery: $(pmset -g batt | grep -o '[0-9]*%')"
  echo "--------------------------------------"
}

# pbcopy_files function (macOS specific)
pbcopy_files() {
  setopt nullglob  # Allow wildcards with no matches

  local save_to_folder=false
  local output_folder="pbcopy_files_output"
  local target_path=""
  local processed_count=0
  local root_folder=$(basename "$(pwd)")
  export PATH=$PATH:/bin:/usr/bin:/usr/local/bin

  # Parse command line options
  while getopts ":s" opt; do
    case ${opt} in
      s ) save_to_folder=true ;;
      \? ) echo "\033[1;31mError: Invalid option: -$OPTARG\033[0m" >&2; return 1 ;;
    esac
  done
  shift $((OPTIND -1))

  # Check if a target path is provided
  if [ $# -eq 0 ]; then
    echo "\033[1;31mError: No target path provided.\033[0m"
    echo "Usage: pbcopy_files [-s] /path/to/file_or_folder"
    return 1
  fi

  target_path="$1"
  local base_path=$(pwd)  # Get the current working directory (root path)

  # Function to determine the correct comment style based on file extension
  get_comment_style() {
    local filename="$1"
    case "$filename" in
      *.js|*.jsx|*.ts|*.tsx|*.mjs|*.cjs) echo "//" ;;
      *.css|*.html) echo "/* */" ;;
      *.lua) echo "--" ;;
      *.py|*.rb|*.sh|*.zsh|*.bash|*.ksh) echo "#" ;;
      *.c|*.cpp|*.h|*.hpp|*.java|*.go|*.swift) echo "//" ;;
      *) echo "/* */" ;;
    esac
  }

  # Function to sanitize file path for use as a filename
  sanitize_path() {
    echo "$1" | sed "s|^\./||" | sed "s|/|>|g"
  }

  # Process an individual file
  process_file() {
    local file="$1"
    local comment_style=$(get_comment_style "$file")
    local relative_path="${file#$base_path/}"

    # Determine if it's a block comment style (like /* ... */)
    if [[ "$comment_style" == "/* */" ]]; then
      local content="/* Current file: $relative_path */\n$(cat "$file")"
    else
      local content="$comment_style Current file: $relative_path\n$(cat "$file")"
    fi

    if $save_to_folder; then
      local sanitized_path="${root_folder}>$(sanitize_path "$relative_path")"
      echo -e "$content" > "$output_folder/$sanitized_path"
    else
      echo -e "$content" | pbcopy
    fi

    ((processed_count++))
  }

  # Process a folder recursively
  process_files() {
    local dir="$1"

    for file in "$dir"/*; do
      if [ -f "$file" ]; then
        local relative_path="${file#$base_path/}"
        echo -n "Process $relative_path? (Enter/s/q): "
        read -k 1 user_input
        echo
        case $user_input in
          s|S) echo "Skipped." ;;
          q|Q) echo "Quitting..."; return ;;
          *) process_file "$file" ;;
        esac
      elif [ -d "$file" ]; then
        process_files "$file"
      fi
    done
  }

  # Create or clear output folder if saving to folder
  if $save_to_folder; then
    if [ -d "$output_folder" ]; then
      echo "Removing existing output folder..."
      rm -rf "$output_folder"
    fi
    mkdir -p "$output_folder"
    echo "Created fresh output folder: $output_folder"
  fi

  # Process the target path
  if [ -f "$target_path" ]; then
    process_file "$target_path"
  elif [ -d "$target_path" ]; then
    process_files "$target_path"
  else
    echo "\033[1;31mError: $target_path is not a valid file or folder.\033[0m"
    echo "Usage: pbcopy_files [-s] /path/to/file_or_folder"
    return 1
  fi

  # Print summary
  if $save_to_folder; then
    echo "Saved $processed_count file(s) to $output_folder/"
  else
    echo "Copied $processed_count file(s) to clipboard."
  fi
}

```

`/dotfiles/environments/macos/zsh.plugins`:

```plugins
# macOS-specific plugins
plugins+=(brew macos)

```

`/dotfiles/host/home/nvim/LICENSE`:

```
This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <https://unlicense.org>

```

`/dotfiles/host/home/nvim/README.md`:

```md
**This repo is supposed to used as config by NvChad users!**

- The main nvchad repo (NvChad/NvChad) is used as a plugin by this repo.
- So you just import its modules , like `require "nvchad.options" , require "nvchad.mappings"`
- So you can delete the .git from this repo ( when you clone it locally ) or fork it :)

# Credits

1) Lazyvim starter https://github.com/LazyVim/starter as nvchad's starter was inspired by Lazyvim's . It made a lot of things easier!

```

`/dotfiles/host/home/nvim/init.lua`:

```lua
vim.g.base46_cache = vim.fn.stdpath "data" .. "/base46/"
vim.g.mapleader = " "

-- bootstrap lazy and all plugins
local lazypath = vim.fn.stdpath "data" .. "/lazy/lazy.nvim"

if not vim.uv.fs_stat(lazypath) then
  local repo = "https://github.com/folke/lazy.nvim.git"
  vim.fn.system { "git", "clone", "--filter=blob:none", repo, "--branch=stable", lazypath }
end

vim.opt.rtp:prepend(lazypath)

local lazy_config = require "configs.lazy"

-- load plugins
require("lazy").setup({
  {
    "NvChad/NvChad",
    lazy = false,
    branch = "v2.5",
    import = "nvchad.plugins",
  },

  { import = "plugins" },
}, lazy_config)

-- load theme
dofile(vim.g.base46_cache .. "defaults")
dofile(vim.g.base46_cache .. "statusline")

require "options"
require "nvchad.autocmds"

vim.schedule(function()
  require "mappings"
end)

```

`/dotfiles/host/home/nvim/lazy-lock.json`:

```json
{
  "LuaSnip": { "branch": "master", "commit": "c9b9a22904c97d0eb69ccb9bab76037838326817" },
  "NvChad": { "branch": "v2.5", "commit": "6f25b2739684389ca69ea8229386c098c566c408" },
  "base46": { "branch": "v2.5", "commit": "fde7a2cd54599e148d376f82980407c2d24b0fa2" },
  "cmp-buffer": { "branch": "main", "commit": "3022dbc9166796b644a841a02de8dd1cc1d311fa" },
  "cmp-nvim-lsp": { "branch": "main", "commit": "99290b3ec1322070bcfb9e846450a46f6efa50f0" },
  "cmp-nvim-lua": { "branch": "main", "commit": "f12408bdb54c39c23e67cab726264c10db33ada8" },
  "cmp-path": { "branch": "main", "commit": "91ff86cd9c29299a64f968ebb45846c485725f23" },
  "cmp_luasnip": { "branch": "master", "commit": "98d9cb5c2c38532bd9bdb481067b20fea8f32e90" },
  "conform.nvim": { "branch": "master", "commit": "8ed162b0637d4c4f69ebe3e8e49b35662a82e137" },
  "friendly-snippets": { "branch": "main", "commit": "efff286dd74c22f731cdec26a70b46e5b203c619" },
  "gitsigns.nvim": { "branch": "main", "commit": "8b00147519d6f8353867d5d0b55f587306b0cfb6" },
  "indent-blankline.nvim": { "branch": "master", "commit": "e10626f7fcd51ccd56d7ffc00883ba7e0aa28f78" },
  "lazy.nvim": { "branch": "main", "commit": "ac21a639c7ecfc8b822dcc9455deceea3778f839" },
  "mason.nvim": { "branch": "main", "commit": "f9f3b464dda319288b8ce592e53f0d9cf9ca8b4e" },
  "menu": { "branch": "main", "commit": "7769b17c2a131108c02b10e9f844e504aa605cc2" },
  "minty": { "branch": "main", "commit": "6dce9f097667862537823d515a0250ce58faab05" },
  "nvim-autopairs": { "branch": "master", "commit": "68f0e5c3dab23261a945272032ee6700af86227a" },
  "nvim-cmp": { "branch": "main", "commit": "12509903a5723a876abd65953109f926f4634c30" },
  "nvim-lint": { "branch": "master", "commit": "6e9dd545a1af204c4022a8fcd99727ea41ffdcc8" },
  "nvim-lspconfig": { "branch": "master", "commit": "7af2c37192deae28d1305ae9e68544f7fb5408e1" },
  "nvim-tree.lua": { "branch": "master", "commit": "80523101f0ae48b7f1990e907b685a3d79776c01" },
  "nvim-treesitter": { "branch": "master", "commit": "00a513f87ee3c339c2024b08db3eb63ba7736ed6" },
  "nvim-web-devicons": { "branch": "master", "commit": "1020869742ecb191f260818234517f4a1515cfe8" },
  "plenary.nvim": { "branch": "master", "commit": "857c5ac632080dba10aae49dba902ce3abf91b35" },
  "telescope.nvim": { "branch": "master", "commit": "78857db9e8d819d3cc1a9a7bdc1d39d127a36495" },
  "ts-comments.nvim": { "branch": "main", "commit": "872dcfa0418f4a33b7437fb4d9f4e89f2f000d74" },
  "ui": { "branch": "v3.0", "commit": "f5576f0499d0a7bf053991cba4564d73a55af875" },
  "volt": { "branch": "main", "commit": "3bedb1576db574af160643eea7df3b09dbe5ee9c" },
  "which-key.nvim": { "branch": "main", "commit": "5bf7a73fe851896d5ac26d313db849bf00f45b78" }
}

```

`/dotfiles/host/home/nvim/lua/chadrc.lua`:

```lua
-- This file needs to have same structure as nvconfig.lua
-- https://github.com/NvChad/ui/blob/v2.5/lua/nvconfig.lua

---@type ChadrcConfig
local M = {}

M.base46 = {
  theme = "nord",

  hl_override = {
    Comment = { italic = true },
    ["@comment"] = { italic = true },
  },
}

M.nvdash = {
  load_on_startup = true,
  header = {
    "   ⣴⣶⣤⡤⠦⣤⣀⣤⠆     ⣈⣭⣿⣶⣿⣦⣼⣆          ",
    "    ⠉⠻⢿⣿⠿⣿⣿⣶⣦⠤⠄⡠⢾⣿⣿⡿⠋⠉⠉⠻⣿⣿⡛⣦       ",
    "          ⠈⢿⣿⣟⠦ ⣾⣿⣿⣷    ⠻⠿⢿⣿⣧⣄     ",
    "           ⣸⣿⣿⢧ ⢻⠻⣿⣿⣷⣄⣀⠄⠢⣀⡀⠈⠙⠿⠄    ",
    "          ⢠⣿⣿⣿⠈    ⣻⣿⣿⣿⣿⣿⣿⣿⣛⣳⣤⣀⣀   ",
    "   ⢠⣧⣶⣥⡤⢄ ⣸⣿⣿⠘  ⢀⣴⣿⣿⡿⠛⣿⣿⣧⠈⢿⠿⠟⠛⠻⠿⠄  ",
    "  ⣰⣿⣿⠛⠻⣿⣿⡦⢹⣿⣷   ⢊⣿⣿⡏  ⢸⣿⣿⡇ ⢀⣠⣄⣾⠄   ",
    " ⣠⣿⠿⠛ ⢀⣿⣿⣷⠘⢿⣿⣦⡀ ⢸⢿⣿⣿⣄ ⣸⣿⣿⡇⣪⣿⡿⠿⣿⣷⡄  ",
    " ⠙⠃   ⣼⣿⡟  ⠈⠻⣿⣿⣦⣌⡇⠻⣿⣿⣷⣿⣿⣿ ⣿⣿⡇ ⠛⠻⢷⣄ ",
    "      ⢻⣿⣿⣄   ⠈⠻⣿⣿⣿⣷⣿⣿⣿⣿⣿⡟ ⠫⢿⣿⡆     ",
    "       ⠻⣿⣿⣿⣿⣶⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⡟⢀⣀⣤⣾⡿⠃     ",
    "                                   ",
    "                                   ",
  },
}

M.ui = {
  theme = "nord",

  statusline = {
    theme = "default",
    separator_style = "round",
  },

  tabufline = {
    enabled = false,
  },

  -- term = {
  -- enabled = false,
  -- },
}

return M

```

`/dotfiles/host/home/nvim/lua/configs/comment.lua`:

```lua
return {
  -- ignore = "^$", -- ignore empty lines
  -- pre_hook = require("ts_context_commentstring.integrations.comment_nvim").create_pre_hook,
}

```

`/dotfiles/host/home/nvim/lua/configs/commentstring.lua`:

```lua
return {
  enable_autocmd = false,
}

```

`/dotfiles/host/home/nvim/lua/configs/conform.lua`:

```lua
local options = {
  formatters_by_ft = {
    lua = { "stylua" },

    vue = {
      "eslint_d", -- Necessary for Planhat setup
      "prettierd",
      "prettier",
      stop_after_first = true,
    },

    javascript = {
      "eslint_d", -- Necessary for Planhat setup
      "prettierd",
      "prettier",
      stop_after_first = true,
    },
    javascriptreact = {
      "eslint_d", -- Necessary for Planhat setup
      "prettierd",
      "prettier",
      stop_after_first = true,
    },
    ["javascript.jsx"] = {
      "eslint_d", -- Necessary for Planhat setup
      "prettierd",
      "prettier",
      stop_after_first = true,
    },

    typescript = {
      "eslint_d", -- Necessary for Planhat setup
      "prettierd",
      "prettier",
      stop_after_first = true,
    },
    typescriptreact = {
      "eslint_d", -- Necessary for Planhat setup
      "prettierd",
      "prettier",
      stop_after_first = true,
    },
    ["typescript.tsx"] = {
      "eslint_d", -- Necessary for Planhat setup
      "prettierd",
      "prettier",
      stop_after_first = true,
    },

    css = { "prettierd", "prettier", stop_after_first = true },
    html = { "prettierd", "prettier", stop_after_first = true },
    json = { "prettierd", "prettier", stop_after_first = true },
    graphql = { "prettierd", "prettier", stop_after_first = true },
  },

  format_on_save = {
    -- These options will be passed to conform.format()
    timeout_ms = 10000,
    lsp_fallback = true,
  },
}

return options

```

`/dotfiles/host/home/nvim/lua/configs/gitsigns.lua`:

```lua
local options = {
  current_line_blame = true, -- Toggle with `:Gitsigns toggle_current_line_blame`
  current_line_blame_opts = {
    virt_text = true,
    virt_text_pos = "eol", -- 'eol' | 'overlay' | 'right_align'
    delay = 0,
    ignore_whitespace = false,
    virt_text_priority = 100,
  },
  current_line_blame_formatter = " <author>, <author_time:%R> - <summary>",
}

return options


```

`/dotfiles/host/home/nvim/lua/configs/lazy.lua`:

```lua
return {
  defaults = { lazy = true },
  install = { colorscheme = { "nvchad" } },

  ui = {
    icons = {
      ft = "",
      lazy = "󰂠 ",
      loaded = "",
      not_loaded = "",
    },
  },

  performance = {
    rtp = {
      disabled_plugins = {
        "2html_plugin",
        "tohtml",
        "getscript",
        "getscriptPlugin",
        "gzip",
        "logipat",
        "netrw",
        "netrwPlugin",
        "netrwSettings",
        "netrwFileHandlers",
        "matchit",
        "tar",
        "tarPlugin",
        "rrhelper",
        "spellfile_plugin",
        "vimball",
        "vimballPlugin",
        "zip",
        "zipPlugin",
        "tutor",
        "rplugin",
        "syntax",
        "synmenu",
        "optwin",
        "compiler",
        "bugreport",
        "ftplugin",
      },
    },
  },
}

```

`/dotfiles/host/home/nvim/lua/configs/lspconfig.lua`:

```lua
-- load defaults i.e lua_lsp
require("nvchad.configs.lspconfig").defaults()

local lspconfig = require "lspconfig"

local servers = { "eslint", "html", "cssls", "lua_ls", "tailwindcss", "volar" }
local nvlsp = require "nvchad.configs.lspconfig"

-- lsps with default config
for _, lsp in ipairs(servers) do
  lspconfig[lsp].setup {
    on_attach = nvlsp.on_attach,
    on_init = nvlsp.on_init,
    capabilities = nvlsp.capabilities,
  }
end

local mason_registry = require "mason-registry"
local typescript_plugin_path = mason_registry.get_package("vue-language-server"):get_install_path()
  .. "/node_modules/@vue/language-server/node_modules/@vue/typescript-plugin"

-- configuring single server, example: typescript
lspconfig.ts_ls.setup {
  on_attach = nvlsp.on_attach,
  capabilities = nvlsp.capabilities,
  init_options = {
    preferences = {
      disableSuggestions = true,
    },
    plugins = {
      {
        name = "@vue/typescript-plugin",
        location = typescript_plugin_path,
        languages = { "vue" },
      },
    },
  },
  filetypes = {
    "javascript",
    "javascriptreact",
    "javascript.jsx",
    "typescript",
    "typescriptreact",
    "typescript.tsx",
    "vue",
  },
}

```

`/dotfiles/host/home/nvim/lua/configs/mason.lua`:

```lua
local opts = {
  ensure_installed = {
    -- lua stuff
    "lua-language-server",
    "stylua",

    -- web dev stuff
    "css-lsp",
    "html-lsp",
    "typescript-language-server",
    "tailwindcss-language-server",
    "prettier",
    "prettierd",
    "eslint-lsp",
    "eslint_d",
  },
}

return opts

```

`/dotfiles/host/home/nvim/lua/configs/nvim-lint.lua`:

```lua
local opts = {
  events = { "BufWritePost", "BufReadPost", "InsertLeave" },
  linters_by_ft = {
    javascript = {
      "eslint_d",
      -- "eslint",
    },
    javascriptreact = {
      "eslint_d",
      -- "eslint",
    },
    ["javascript.jsx"] = {
      "eslint_d",
      -- "eslint",
    },

    typescript = {
      "eslint_d",
      -- "eslint",
    },
    typescriptreact = {
      "eslint_d",
      -- "eslint",
    },
    ["typescript.tsx"] = {
      "eslint_d",
      -- "eslint",
    },

    vue = {
      "eslint_d",
      -- "eslint",
    },
  },
}

return opts

-- local lint = require "lint"
-- local lint_augroup = vim.api.nvim_create_augroup("lint", { clear = true })
--
-- vim.api.nvim_create_autocmd({ "BufEnter", "BufWritePost", "InsertLeave" }, {
--   group = lint_augroup,
--   callback = function()
--     lint.try_lint()
--   end,
-- })

```

`/dotfiles/host/home/nvim/lua/configs/nvim-tree.lua`:

```lua
local opts = {
  view = {
    adaptive_size = true,
  },
  renderer = {
    icons = {
      glyphs = {
        folder = {
          open = "",
        },
      },
    },
  },
}

return opts


```

`/dotfiles/host/home/nvim/lua/configs/treesitter.lua`:

```lua
local opts = {
  ensure_installed = {
    "vim",
    "lua",
    "html",
    "css",
    "vue",
    "svelte",
    "javascript",
    "typescript",
    "tsx",
    "json",
    "markdown",
    "markdown_inline",
    "vimdoc",
  },
}

return opts


```

`/dotfiles/host/home/nvim/lua/mappings.lua`:

```lua
require "nvchad.mappings"

local map = vim.keymap.set

map("n", ";", ":", { desc = "CMD enter command mode" })

map("n", "<leader>x", ":close<CR>", { desc = "Close window" })

map("n", "<leader>v", ":vsplit<CR>", { desc = "Split window vertically" })
map("n", "<leader>h", ":split<CR>", { desc = "Split window horizontally" })

map("n", "<C-d>", "<C-d>zz", { desc = "Move down half-page" })
map("n", "<C-u>", "<C-u>zz", { desc = "Move up half-page" })

map("i", "jk", "<ESC>")
map("i", "<C-s>", "<Esc>:w<CR>", { desc = "Save file in insert mode" })

map("v", "J", ":m '>+1<CR>gv=gv", { desc = "Move line down" })
map("v", "K", ":m '<-2<CR>gv=gv", { desc = "Move line up" })

-- Disable default terminal mapping
map("n", "<D-M-i>", "<nop>", { desc = "Disable default terminal" })
map("t", "<D-M-i>", "<nop>", { desc = "Disable default terminal" })

```

`/dotfiles/host/home/nvim/lua/options.lua`:

```lua
require "nvchad.options"

-- 'Hybrid' line numbers (relative + current line)
vim.wo.number = true
vim.wo.relativenumber = true

vim.opt.scrolloff = 8 -- Set padding when scrolling

```

`/dotfiles/host/home/nvim/lua/plugins/init.lua`:

```lua
return {
  {
    "stevearc/conform.nvim",
    event = "BufWritePre",
    opts = require "configs.conform",
  },

  {
    "folke/ts-comments.nvim",
    event = "VeryLazy",
    opts = {},
  },

  {
    "mfussenegger/nvim-lint",
    opts = require "configs.nvim-lint",
  },

  {
    "nvim-tree/nvim-tree.lua",
    cmd = { "NvimTreeToggle", "NvimTreeFocus" },
    opts = require "configs.nvim-tree",
  },

  {
    "neovim/nvim-lspconfig",
    config = function()
      require "configs.lspconfig"
    end,
  },

  {
    "nvim-treesitter/nvim-treesitter",
    opts = require "configs.treesitter",
  },

  {
    "williamboman/mason.nvim",
    opts = require "configs.mason",
  },

  {
    "lewis6991/gitsigns.nvim",
    opts = require "configs.gitsigns",
  },
}

```

`/dotfiles/host/home/starship.toml`:

```toml
format = """
[](#4C566A)\
$time\
[](bg:#434C5E fg:#4C566A)\
$directory\
[](fg:#434C5E bg:#3B4252)\
$git_branch\
$git_status\
[](fg:#3B4252 bg:#2E3440)\
"""
right_format = """$nodejs"""
command_timeout = 1000

[directory]
style = "bg:#434C5E"
format = "[ $path ]($style)"
truncation_length = 3
truncation_symbol = "…/"

[git_branch]
symbol = ""
style = "bg:#3B4252"
format = '[ $symbol $branch ]($style)'

[git_status]
style = "bg:#3B4252"
format = '[$all_status$ahead_behind ]($style)'

[nodejs]
symbol = ""
style = "bg:#2E3440 #4C566A"
format = '[ $symbol ($version) ]($style)'

[time]
disabled = false
time_format = "%R" # Hour:Minute Format
style = "bg:#4C566A"
format = '[ $time ]($style)'

```

`/dotfiles/host/home/wezterm/wezterm.lua`:

```lua
local wezterm = require("wezterm")
local act = wezterm.action

-- Set default padding
local default_padding = {
	left = 8,
	right = 8,
	top = 8,
	bottom = 8,
}

-- Set padding for Neovim (i.e., no padding)
local nvim_padding = {
	left = 0,
	right = 0,
	top = 0,
	bottom = 0,
}

wezterm.on("update-right-status", function(window, pane)
	-- Get the current process name
	local process_name = pane:get_foreground_process_name()

	-- Check if Neovim is running in the active pane
	if process_name and process_name:find("nvim") then
		-- Remove padding when Neovim is detected
		window:set_config_overrides({
			window_padding = nvim_padding,
		})
	else
		-- Restore default padding when not in Neovim
		window:set_config_overrides({
			window_padding = default_padding,
		})
	end
end)

return {
	color_scheme = "nord",
	font = wezterm.font("VictorMono Nerd Font", { weight = "Regular", italic = false }),

	adjust_window_size_when_changing_font_size = false,

	font_size = 14.0,

	hide_tab_bar_if_only_one_tab = true,

	native_macos_fullscreen_mode = true,

	window_padding = {
		left = 0,
		right = 0,
		top = 0,
		bottom = 0,
	},

	inactive_pane_hsb = {
		-- NOTE: these values are multipliers, applied on normal pane values
		saturation = 0.5,
		brightness = 0.8,
	},

	keys = {
		{
			key = "f",
			mods = "CMD|CTRL",
			action = act.ToggleFullScreen,
		},
		{
			key = "[",
			mods = "CMD",
			action = act.ActivatePaneDirection("Left"),
		},
		{
			key = "]",
			mods = "CMD",
			action = act.ActivatePaneDirection("Right"),
		},
		{
			key = "d",
			mods = "CMD",
			action = act.SplitHorizontal({ domain = "CurrentPaneDomain" }),
		},
		{
			key = "d",
			mods = "CMD|SHIFT",
			action = act.SplitVertical({ domain = "CurrentPaneDomain" }),
		},
		{
			key = "w",
			mods = "CMD",
			action = act.CloseCurrentPane({ confirm = false }),
		},

		-- Conform to Mac shortcuts for text navigation ([forward | backward] [word | line])
		-- There are better ways to do this, see copyMode in Wezterm docs
		{
			key = "LeftArrow",
			mods = "OPT",
			action = wezterm.action({ SendString = "\x1bb" }),
		},
		{
			key = "RightArrow",
			mods = "OPT",
			action = wezterm.action({ SendString = "\x1bf" }),
		},

		{
			key = "LeftArrow",
			mods = "CMD",
			action = wezterm.action({ SendString = "\x1bOH" }),
		},
		{
			key = "RightArrow",
			mods = "CMD",
			action = wezterm.action({ SendString = "\x1bOF" }),
		},
	},
}

```

`/dotfiles/host/home/dot_zshrc.tmpl`:

```tmpl
# .zshrc
# Generated by chezmoi

# Path to your oh-my-zsh installation
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load
ZSH_THEME="robbyrussell"

# Plugins
plugins=(
  # Default plugins
  {{ template "defaults/zsh/plugins.tmpl" . }}
  
  # Environment-specific plugins
  {{ if eq .hostEnvironment "macos" -}}
  {{ template "environments/macos/zsh/plugins.tmpl" . }}
  {{ else if eq .hostEnvironment "linux-debian" -}}
  {{ template "environments/linux/zsh/plugins.tmpl" . }}
  {{ else if eq .hostEnvironment "linux-arch" -}}
  {{ template "environments/linux/zsh/plugins.tmpl" . }}
  {{ end -}}
)

# Load Oh My Zsh
source $ZSH/oh-my-zsh.sh

# Helper function to source files if they exist
source_if_exists() {
  [ -f "$1" ] && source "$1"
}

# Load default configuration
{{ template "defaults/zsh/configuration.tmpl" . }}

# Environment-specific configuration
{{ if eq .hostEnvironment "macos" -}}
{{ template "environments/macos/zsh/configuration.tmpl" . }}
{{ else if eq .hostEnvironment "linux-debian" -}}
{{ template "shared/linux/zsh/configuration.tmpl" . }}
{{ template "environments/linux/zsh/configuration.tmpl" . }}
{{ else if eq .hostEnvironment "linux-arch" -}}
{{ template "shared/linux/zsh/configuration.tmpl" . }}
{{ template "environments/linux/zsh/configuration.tmpl" . }}
{{ end -}}

# Add local bin to PATH
export PATH="$HOME/.local/bin:$PATH"

# Default aliases
{{ template "defaults/zsh/aliases.tmpl" . }}

# Environment-specific aliases
{{ if eq .hostEnvironment "macos" -}}
{{ template "environments/macos/zsh/aliases.tmpl" . }}
{{ else if eq .hostEnvironment "linux-debian" -}}
{{ template "environments/linux/zsh/aliases.tmpl" . }}
{{ else if eq .hostEnvironment "linux-arch" -}}
{{ template "environments/linux/zsh/aliases.tmpl" . }}
{{ end -}}

# Starship prompt if installed
if command -v starship &> /dev/null; then
  eval "$(starship init zsh)"
fi

```

`/dotfiles/scripts/setup-container.sh`:

```sh
#!/bin/bash
# scripts/setup-container.sh
set -euo pipefail

DOTFILES_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

if [ $# -lt 1 ]; then
    echo "Usage: $0 <container-name> [additional-args]"
    echo "Available containers:"
    ls -1 "$DOTFILES_DIR/containers" | grep -v "_common"
    exit 1
fi

CONTAINER_NAME="$1"
shift

CONTAINER_DIR="$DOTFILES_DIR/containers/$CONTAINER_NAME"
if [ ! -d "$CONTAINER_DIR" ]; then
    echo "Container not found: $CONTAINER_NAME"
    exit 1
fi

echo "Setting up Docker container: $CONTAINER_NAME"

# Create Docker working directory
DOCKER_DIR="$HOME/docker/$CONTAINER_NAME"
mkdir -p "$DOCKER_DIR"

# Initialize chezmoi for this container
chezmoi init --source="$CONTAINER_DIR" --apply=false

# Generate Docker files
echo "Generating Docker files..."
chezmoi execute-template --source="$CONTAINER_DIR" < "$CONTAINER_DIR/Dockerfile.tmpl" > "$DOCKER_DIR/Dockerfile"
chezmoi execute-template --source="$CONTAINER_DIR" < "$CONTAINER_DIR/docker-compose.yml.tmpl" > "$DOCKER_DIR/docker-compose.yml"

echo "Docker container prepared in $DOCKER_DIR"
echo "To build and run: cd $DOCKER_DIR && docker-compose up -d"

```

`/dotfiles/machine/home/dot_zshrc.tmpl`:

```tmpl
# .zshrc
# Generated by chezmoi

# Path to your oh-my-zsh installation
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load
ZSH_THEME="robbyrussell"

# Helper function to source files if they exist
source_if_exists() {
  [ -f "$1" ] && source "$1"
}

# Plugins
plugins=(
  # Default plugins
  {{ template "defaults/shell/plugins.tmpl" . }}
  
  # Environment-specific plugins
  {{ if eq .hostEnvironment "macos" -}}
  {{ template "macos/shell-plugins.tmpl" . }}
  {{ else if eq .hostEnvironment "linux-debian" -}}
  {{ template "linux/debian/shell-plugins.tmpl" . }}
  {{ else if eq .hostEnvironment "linux-arch" -}}
  {{ template "linux/arch/shell-plugins.tmpl" . }}
  {{ end -}}
)

# Load Oh My Zsh
source $ZSH/oh-my-zsh.sh

# Load default configuration
{{ template "defaults/shell/configuration.tmpl" . }}

# Environment-specific configuration
{{ if eq .hostEnvironment "macos" -}}
{{ template "macos/shell-configuration.tmpl" . }}
{{ else if eq .hostEnvironment "linux-debian" -}}
{{ template "shared/linux/shell-configuration.tmpl" . }}
{{ template "linux/debian/shell-configuration.tmpl" . }}
{{ else if eq .hostEnvironment "linux-arch" -}}
{{ template "shared/linux/shell-configuration.tmpl" . }}
{{ template "linux/arch/shell-configuration.tmpl" . }}
{{ end -}}

# Add local bin to PATH
export PATH="$HOME/.local/bin:$PATH"

# Default aliases
{{ template "defaults/shell/aliases.tmpl" . }}

# Environment-specific aliases
{{ if eq .hostEnvironment "macos" -}}
{{ template "macos/shell-aliases.tmpl" . }}
{{ else if eq .hostEnvironment "linux-debian" -}}
{{ template "linux/debian/shell-aliases.tmpl" . }}
{{ else if eq .hostEnvironment "linux-arch" -}}
{{ template "linux/arch/shell-aliases.tmpl" . }}
{{ end -}}

# Starship prompt if installed
if command -v starship &> /dev/null; then
  eval "$(starship init zsh)"
fi

```

`/dotfiles/machine/home/nvim/LICENSE`:

```
This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <https://unlicense.org>

```

`/dotfiles/machine/home/nvim/README.md`:

```md
**This repo is supposed to used as config by NvChad users!**

- The main nvchad repo (NvChad/NvChad) is used as a plugin by this repo.
- So you just import its modules , like `require "nvchad.options" , require "nvchad.mappings"`
- So you can delete the .git from this repo ( when you clone it locally ) or fork it :)

# Credits

1) Lazyvim starter https://github.com/LazyVim/starter as nvchad's starter was inspired by Lazyvim's . It made a lot of things easier!

```

`/dotfiles/machine/home/nvim/init.lua`:

```lua
vim.g.base46_cache = vim.fn.stdpath "data" .. "/base46/"
vim.g.mapleader = " "

-- bootstrap lazy and all plugins
local lazypath = vim.fn.stdpath "data" .. "/lazy/lazy.nvim"

if not vim.uv.fs_stat(lazypath) then
  local repo = "https://github.com/folke/lazy.nvim.git"
  vim.fn.system { "git", "clone", "--filter=blob:none", repo, "--branch=stable", lazypath }
end

vim.opt.rtp:prepend(lazypath)

local lazy_config = require "configs.lazy"

-- load plugins
require("lazy").setup({
  {
    "NvChad/NvChad",
    lazy = false,
    branch = "v2.5",
    import = "nvchad.plugins",
  },

  { import = "plugins" },
}, lazy_config)

-- load theme
dofile(vim.g.base46_cache .. "defaults")
dofile(vim.g.base46_cache .. "statusline")

require "options"
require "nvchad.autocmds"

vim.schedule(function()
  require "mappings"
end)

```

`/dotfiles/machine/home/nvim/lazy-lock.json`:

```json
{
  "LuaSnip": { "branch": "master", "commit": "c9b9a22904c97d0eb69ccb9bab76037838326817" },
  "NvChad": { "branch": "v2.5", "commit": "6f25b2739684389ca69ea8229386c098c566c408" },
  "base46": { "branch": "v2.5", "commit": "fde7a2cd54599e148d376f82980407c2d24b0fa2" },
  "cmp-buffer": { "branch": "main", "commit": "3022dbc9166796b644a841a02de8dd1cc1d311fa" },
  "cmp-nvim-lsp": { "branch": "main", "commit": "99290b3ec1322070bcfb9e846450a46f6efa50f0" },
  "cmp-nvim-lua": { "branch": "main", "commit": "f12408bdb54c39c23e67cab726264c10db33ada8" },
  "cmp-path": { "branch": "main", "commit": "91ff86cd9c29299a64f968ebb45846c485725f23" },
  "cmp_luasnip": { "branch": "master", "commit": "98d9cb5c2c38532bd9bdb481067b20fea8f32e90" },
  "conform.nvim": { "branch": "master", "commit": "8ed162b0637d4c4f69ebe3e8e49b35662a82e137" },
  "friendly-snippets": { "branch": "main", "commit": "efff286dd74c22f731cdec26a70b46e5b203c619" },
  "gitsigns.nvim": { "branch": "main", "commit": "8b00147519d6f8353867d5d0b55f587306b0cfb6" },
  "indent-blankline.nvim": { "branch": "master", "commit": "e10626f7fcd51ccd56d7ffc00883ba7e0aa28f78" },
  "lazy.nvim": { "branch": "main", "commit": "ac21a639c7ecfc8b822dcc9455deceea3778f839" },
  "mason.nvim": { "branch": "main", "commit": "f9f3b464dda319288b8ce592e53f0d9cf9ca8b4e" },
  "menu": { "branch": "main", "commit": "7769b17c2a131108c02b10e9f844e504aa605cc2" },
  "minty": { "branch": "main", "commit": "6dce9f097667862537823d515a0250ce58faab05" },
  "nvim-autopairs": { "branch": "master", "commit": "68f0e5c3dab23261a945272032ee6700af86227a" },
  "nvim-cmp": { "branch": "main", "commit": "12509903a5723a876abd65953109f926f4634c30" },
  "nvim-lint": { "branch": "master", "commit": "6e9dd545a1af204c4022a8fcd99727ea41ffdcc8" },
  "nvim-lspconfig": { "branch": "master", "commit": "7af2c37192deae28d1305ae9e68544f7fb5408e1" },
  "nvim-tree.lua": { "branch": "master", "commit": "80523101f0ae48b7f1990e907b685a3d79776c01" },
  "nvim-treesitter": { "branch": "master", "commit": "00a513f87ee3c339c2024b08db3eb63ba7736ed6" },
  "nvim-web-devicons": { "branch": "master", "commit": "1020869742ecb191f260818234517f4a1515cfe8" },
  "plenary.nvim": { "branch": "master", "commit": "857c5ac632080dba10aae49dba902ce3abf91b35" },
  "telescope.nvim": { "branch": "master", "commit": "78857db9e8d819d3cc1a9a7bdc1d39d127a36495" },
  "ts-comments.nvim": { "branch": "main", "commit": "872dcfa0418f4a33b7437fb4d9f4e89f2f000d74" },
  "ui": { "branch": "v3.0", "commit": "f5576f0499d0a7bf053991cba4564d73a55af875" },
  "volt": { "branch": "main", "commit": "3bedb1576db574af160643eea7df3b09dbe5ee9c" },
  "which-key.nvim": { "branch": "main", "commit": "5bf7a73fe851896d5ac26d313db849bf00f45b78" }
}

```

`/dotfiles/machine/home/nvim/lua/chadrc.lua`:

```lua
-- This file needs to have same structure as nvconfig.lua
-- https://github.com/NvChad/ui/blob/v2.5/lua/nvconfig.lua

---@type ChadrcConfig
local M = {}

M.base46 = {
  theme = "nord",

  hl_override = {
    Comment = { italic = true },
    ["@comment"] = { italic = true },
  },
}

M.nvdash = {
  load_on_startup = true,
  header = {
    "   ⣴⣶⣤⡤⠦⣤⣀⣤⠆     ⣈⣭⣿⣶⣿⣦⣼⣆          ",
    "    ⠉⠻⢿⣿⠿⣿⣿⣶⣦⠤⠄⡠⢾⣿⣿⡿⠋⠉⠉⠻⣿⣿⡛⣦       ",
    "          ⠈⢿⣿⣟⠦ ⣾⣿⣿⣷    ⠻⠿⢿⣿⣧⣄     ",
    "           ⣸⣿⣿⢧ ⢻⠻⣿⣿⣷⣄⣀⠄⠢⣀⡀⠈⠙⠿⠄    ",
    "          ⢠⣿⣿⣿⠈    ⣻⣿⣿⣿⣿⣿⣿⣿⣛⣳⣤⣀⣀   ",
    "   ⢠⣧⣶⣥⡤⢄ ⣸⣿⣿⠘  ⢀⣴⣿⣿⡿⠛⣿⣿⣧⠈⢿⠿⠟⠛⠻⠿⠄  ",
    "  ⣰⣿⣿⠛⠻⣿⣿⡦⢹⣿⣷   ⢊⣿⣿⡏  ⢸⣿⣿⡇ ⢀⣠⣄⣾⠄   ",
    " ⣠⣿⠿⠛ ⢀⣿⣿⣷⠘⢿⣿⣦⡀ ⢸⢿⣿⣿⣄ ⣸⣿⣿⡇⣪⣿⡿⠿⣿⣷⡄  ",
    " ⠙⠃   ⣼⣿⡟  ⠈⠻⣿⣿⣦⣌⡇⠻⣿⣿⣷⣿⣿⣿ ⣿⣿⡇ ⠛⠻⢷⣄ ",
    "      ⢻⣿⣿⣄   ⠈⠻⣿⣿⣿⣷⣿⣿⣿⣿⣿⡟ ⠫⢿⣿⡆     ",
    "       ⠻⣿⣿⣿⣿⣶⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⡟⢀⣀⣤⣾⡿⠃     ",
    "                                   ",
    "                                   ",
  },
}

M.ui = {
  theme = "nord",

  statusline = {
    theme = "default",
    separator_style = "round",
  },

  tabufline = {
    enabled = false,
  },

  -- term = {
  -- enabled = false,
  -- },
}

return M

```

`/dotfiles/machine/home/nvim/lua/configs/comment.lua`:

```lua
return {
  -- ignore = "^$", -- ignore empty lines
  -- pre_hook = require("ts_context_commentstring.integrations.comment_nvim").create_pre_hook,
}

```

`/dotfiles/machine/home/nvim/lua/configs/commentstring.lua`:

```lua
return {
  enable_autocmd = false,
}

```

`/dotfiles/machine/home/nvim/lua/configs/conform.lua`:

```lua
local options = {
  formatters_by_ft = {
    lua = { "stylua" },

    vue = {
      "eslint_d", -- Necessary for Planhat setup
      "prettierd",
      "prettier",
      stop_after_first = true,
    },

    javascript = {
      "eslint_d", -- Necessary for Planhat setup
      "prettierd",
      "prettier",
      stop_after_first = true,
    },
    javascriptreact = {
      "eslint_d", -- Necessary for Planhat setup
      "prettierd",
      "prettier",
      stop_after_first = true,
    },
    ["javascript.jsx"] = {
      "eslint_d", -- Necessary for Planhat setup
      "prettierd",
      "prettier",
      stop_after_first = true,
    },

    typescript = {
      "eslint_d", -- Necessary for Planhat setup
      "prettierd",
      "prettier",
      stop_after_first = true,
    },
    typescriptreact = {
      "eslint_d", -- Necessary for Planhat setup
      "prettierd",
      "prettier",
      stop_after_first = true,
    },
    ["typescript.tsx"] = {
      "eslint_d", -- Necessary for Planhat setup
      "prettierd",
      "prettier",
      stop_after_first = true,
    },

    css = { "prettierd", "prettier", stop_after_first = true },
    html = { "prettierd", "prettier", stop_after_first = true },
    json = { "prettierd", "prettier", stop_after_first = true },
    graphql = { "prettierd", "prettier", stop_after_first = true },
  },

  format_on_save = {
    -- These options will be passed to conform.format()
    timeout_ms = 10000,
    lsp_fallback = true,
  },
}

return options

```

`/dotfiles/machine/home/nvim/lua/configs/gitsigns.lua`:

```lua
local options = {
  current_line_blame = true, -- Toggle with `:Gitsigns toggle_current_line_blame`
  current_line_blame_opts = {
    virt_text = true,
    virt_text_pos = "eol", -- 'eol' | 'overlay' | 'right_align'
    delay = 0,
    ignore_whitespace = false,
    virt_text_priority = 100,
  },
  current_line_blame_formatter = " <author>, <author_time:%R> - <summary>",
}

return options


```

`/dotfiles/machine/home/nvim/lua/configs/lazy.lua`:

```lua
return {
  defaults = { lazy = true },
  install = { colorscheme = { "nvchad" } },

  ui = {
    icons = {
      ft = "",
      lazy = "󰂠 ",
      loaded = "",
      not_loaded = "",
    },
  },

  performance = {
    rtp = {
      disabled_plugins = {
        "2html_plugin",
        "tohtml",
        "getscript",
        "getscriptPlugin",
        "gzip",
        "logipat",
        "netrw",
        "netrwPlugin",
        "netrwSettings",
        "netrwFileHandlers",
        "matchit",
        "tar",
        "tarPlugin",
        "rrhelper",
        "spellfile_plugin",
        "vimball",
        "vimballPlugin",
        "zip",
        "zipPlugin",
        "tutor",
        "rplugin",
        "syntax",
        "synmenu",
        "optwin",
        "compiler",
        "bugreport",
        "ftplugin",
      },
    },
  },
}

```

`/dotfiles/machine/home/nvim/lua/configs/lspconfig.lua`:

```lua
-- load defaults i.e lua_lsp
require("nvchad.configs.lspconfig").defaults()

local lspconfig = require "lspconfig"

local servers = { "eslint", "html", "cssls", "lua_ls", "tailwindcss", "volar" }
local nvlsp = require "nvchad.configs.lspconfig"

-- lsps with default config
for _, lsp in ipairs(servers) do
  lspconfig[lsp].setup {
    on_attach = nvlsp.on_attach,
    on_init = nvlsp.on_init,
    capabilities = nvlsp.capabilities,
  }
end

local mason_registry = require "mason-registry"
local typescript_plugin_path = mason_registry.get_package("vue-language-server"):get_install_path()
  .. "/node_modules/@vue/language-server/node_modules/@vue/typescript-plugin"

-- configuring single server, example: typescript
lspconfig.ts_ls.setup {
  on_attach = nvlsp.on_attach,
  capabilities = nvlsp.capabilities,
  init_options = {
    preferences = {
      disableSuggestions = true,
    },
    plugins = {
      {
        name = "@vue/typescript-plugin",
        location = typescript_plugin_path,
        languages = { "vue" },
      },
    },
  },
  filetypes = {
    "javascript",
    "javascriptreact",
    "javascript.jsx",
    "typescript",
    "typescriptreact",
    "typescript.tsx",
    "vue",
  },
}

```

`/dotfiles/machine/home/nvim/lua/configs/mason.lua`:

```lua
local opts = {
  ensure_installed = {
    -- lua stuff
    "lua-language-server",
    "stylua",

    -- web dev stuff
    "css-lsp",
    "html-lsp",
    "typescript-language-server",
    "tailwindcss-language-server",
    "prettier",
    "prettierd",
    "eslint-lsp",
    "eslint_d",
  },
}

return opts

```

`/dotfiles/machine/home/nvim/lua/configs/nvim-lint.lua`:

```lua
local opts = {
  events = { "BufWritePost", "BufReadPost", "InsertLeave" },
  linters_by_ft = {
    javascript = {
      "eslint_d",
      -- "eslint",
    },
    javascriptreact = {
      "eslint_d",
      -- "eslint",
    },
    ["javascript.jsx"] = {
      "eslint_d",
      -- "eslint",
    },

    typescript = {
      "eslint_d",
      -- "eslint",
    },
    typescriptreact = {
      "eslint_d",
      -- "eslint",
    },
    ["typescript.tsx"] = {
      "eslint_d",
      -- "eslint",
    },

    vue = {
      "eslint_d",
      -- "eslint",
    },
  },
}

return opts

-- local lint = require "lint"
-- local lint_augroup = vim.api.nvim_create_augroup("lint", { clear = true })
--
-- vim.api.nvim_create_autocmd({ "BufEnter", "BufWritePost", "InsertLeave" }, {
--   group = lint_augroup,
--   callback = function()
--     lint.try_lint()
--   end,
-- })

```

`/dotfiles/machine/home/nvim/lua/configs/nvim-tree.lua`:

```lua
local opts = {
  view = {
    adaptive_size = true,
  },
  renderer = {
    icons = {
      glyphs = {
        folder = {
          open = "",
        },
      },
    },
  },
}

return opts


```

`/dotfiles/machine/home/nvim/lua/configs/treesitter.lua`:

```lua
local opts = {
  ensure_installed = {
    "vim",
    "lua",
    "html",
    "css",
    "vue",
    "svelte",
    "javascript",
    "typescript",
    "tsx",
    "json",
    "markdown",
    "markdown_inline",
    "vimdoc",
  },
}

return opts


```

`/dotfiles/machine/home/nvim/lua/mappings.lua`:

```lua
require "nvchad.mappings"

local map = vim.keymap.set

map("n", ";", ":", { desc = "CMD enter command mode" })

map("n", "<leader>x", ":close<CR>", { desc = "Close window" })

map("n", "<leader>v", ":vsplit<CR>", { desc = "Split window vertically" })
map("n", "<leader>h", ":split<CR>", { desc = "Split window horizontally" })

map("n", "<C-d>", "<C-d>zz", { desc = "Move down half-page" })
map("n", "<C-u>", "<C-u>zz", { desc = "Move up half-page" })

map("i", "jk", "<ESC>")
map("i", "<C-s>", "<Esc>:w<CR>", { desc = "Save file in insert mode" })

map("v", "J", ":m '>+1<CR>gv=gv", { desc = "Move line down" })
map("v", "K", ":m '<-2<CR>gv=gv", { desc = "Move line up" })

-- Disable default terminal mapping
map("n", "<D-M-i>", "<nop>", { desc = "Disable default terminal" })
map("t", "<D-M-i>", "<nop>", { desc = "Disable default terminal" })

```

`/dotfiles/machine/home/nvim/lua/options.lua`:

```lua
require "nvchad.options"

-- 'Hybrid' line numbers (relative + current line)
vim.wo.number = true
vim.wo.relativenumber = true

vim.opt.scrolloff = 8 -- Set padding when scrolling

```

`/dotfiles/machine/home/nvim/lua/plugins/init.lua`:

```lua
return {
  {
    "stevearc/conform.nvim",
    event = "BufWritePre",
    opts = require "configs.conform",
  },

  {
    "folke/ts-comments.nvim",
    event = "VeryLazy",
    opts = {},
  },

  {
    "mfussenegger/nvim-lint",
    opts = require "configs.nvim-lint",
  },

  {
    "nvim-tree/nvim-tree.lua",
    cmd = { "NvimTreeToggle", "NvimTreeFocus" },
    opts = require "configs.nvim-tree",
  },

  {
    "neovim/nvim-lspconfig",
    config = function()
      require "configs.lspconfig"
    end,
  },

  {
    "nvim-treesitter/nvim-treesitter",
    opts = require "configs.treesitter",
  },

  {
    "williamboman/mason.nvim",
    opts = require "configs.mason",
  },

  {
    "lewis6991/gitsigns.nvim",
    opts = require "configs.gitsigns",
  },
}

```

`/dotfiles/machine/home/starship.toml`:

```toml
format = """
[](#4C566A)\
$time\
[](bg:#434C5E fg:#4C566A)\
$directory\
[](fg:#434C5E bg:#3B4252)\
$git_branch\
$git_status\
[](fg:#3B4252 bg:#2E3440)\
"""
right_format = """$nodejs"""
command_timeout = 1000

[directory]
style = "bg:#434C5E"
format = "[ $path ]($style)"
truncation_length = 3
truncation_symbol = "…/"

[git_branch]
symbol = ""
style = "bg:#3B4252"
format = '[ $symbol $branch ]($style)'

[git_status]
style = "bg:#3B4252"
format = '[$all_status$ahead_behind ]($style)'

[nodejs]
symbol = ""
style = "bg:#2E3440 #4C566A"
format = '[ $symbol ($version) ]($style)'

[time]
disabled = false
time_format = "%R" # Hour:Minute Format
style = "bg:#4C566A"
format = '[ $time ]($style)'

```

`/dotfiles/machine/home/wezterm/wezterm.lua`:

```lua
local wezterm = require("wezterm")
local act = wezterm.action

-- Set default padding
local default_padding = {
	left = 8,
	right = 8,
	top = 8,
	bottom = 8,
}

-- Set padding for Neovim (i.e., no padding)
local nvim_padding = {
	left = 0,
	right = 0,
	top = 0,
	bottom = 0,
}

wezterm.on("update-right-status", function(window, pane)
	-- Get the current process name
	local process_name = pane:get_foreground_process_name()

	-- Check if Neovim is running in the active pane
	if process_name and process_name:find("nvim") then
		-- Remove padding when Neovim is detected
		window:set_config_overrides({
			window_padding = nvim_padding,
		})
	else
		-- Restore default padding when not in Neovim
		window:set_config_overrides({
			window_padding = default_padding,
		})
	end
end)

return {
	color_scheme = "nord",
	font = wezterm.font("VictorMono Nerd Font", { weight = "Regular", italic = false }),

	adjust_window_size_when_changing_font_size = false,

	font_size = 14.0,

	hide_tab_bar_if_only_one_tab = true,

	native_macos_fullscreen_mode = true,

	window_padding = {
		left = 0,
		right = 0,
		top = 0,
		bottom = 0,
	},

	inactive_pane_hsb = {
		-- NOTE: these values are multipliers, applied on normal pane values
		saturation = 0.5,
		brightness = 0.8,
	},

	keys = {
		{
			key = "f",
			mods = "CMD|CTRL",
			action = act.ToggleFullScreen,
		},
		{
			key = "[",
			mods = "CMD",
			action = act.ActivatePaneDirection("Left"),
		},
		{
			key = "]",
			mods = "CMD",
			action = act.ActivatePaneDirection("Right"),
		},
		{
			key = "d",
			mods = "CMD",
			action = act.SplitHorizontal({ domain = "CurrentPaneDomain" }),
		},
		{
			key = "d",
			mods = "CMD|SHIFT",
			action = act.SplitVertical({ domain = "CurrentPaneDomain" }),
		},
		{
			key = "w",
			mods = "CMD",
			action = act.CloseCurrentPane({ confirm = false }),
		},

		-- Conform to Mac shortcuts for text navigation ([forward | backward] [word | line])
		-- There are better ways to do this, see copyMode in Wezterm docs
		{
			key = "LeftArrow",
			mods = "OPT",
			action = wezterm.action({ SendString = "\x1bb" }),
		},
		{
			key = "RightArrow",
			mods = "OPT",
			action = wezterm.action({ SendString = "\x1bf" }),
		},

		{
			key = "LeftArrow",
			mods = "CMD",
			action = wezterm.action({ SendString = "\x1bOH" }),
		},
		{
			key = "RightArrow",
			mods = "CMD",
			action = wezterm.action({ SendString = "\x1bOF" }),
		},
	},
}

```

`/dotfiles/README.md`:

```md
# Dotfiles

Modern, modular dotfiles repository managed with chezmoi.

## Structure

- `machine/` - Configuration for your physical machine
  - `.chezmoiscripts/` - Machine-specific scripts
  - `home/` - Files that map to $HOME
- `.chezmoitemplates/` - Shared templates
  - `defaults/` - Base configurations for all environments
  - `shared/` - Shared configurations for categories of environments
  - `macos/` - macOS-specific configurations
  - `linux/` - Linux-specific configurations
- `containers/` - Docker container configurations
  - `web-dev/` - Web development environment
  - `data-science/` - Data science environment

## Installation

### Machine Environment

```bash
sh -c "$(curl -fsLS get.chezmoi.io)" -- init --source=https://github.com/ViktorJT/dotfiles.git/machine --apply
```

### Docker Environments

```bash
# Web Development Environment
curl -fsSL https://raw.githubusercontent.com/ViktorJT/dotfiles/main/scripts/setup-container.sh | bash -s -- web-dev

# Data Science Environment
curl -fsSL https://raw.githubusercontent.com/ViktorJT/dotfiles/main/scripts/setup-container.sh | bash -s -- data-science
```

## Features

- Completely separate configurations for physical machine and Docker containers
- Modular structure with defaults, shared, and environment-specific configurations
- Automatic environment detection and configuration
- Support for multiple Docker environments

```