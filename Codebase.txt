Project Path: Configs

Source Tree:

```
Configs
├── README.md
├── home
│   ├── run_once_install-packages.sh.tmpl
│   ├── nvim
│   │   ├── LICENSE
│   │   ├── README.md
│   │   ├── init.lua
│   │   ├── lazy-lock.json
│   │   └── lua
│   │       ├── chadrc.lua
│   │       ├── configs
│   │       │   ├── comment.lua
│   │       │   ├── commentstring.lua
│   │       │   ├── conform.lua
│   │       │   ├── gitsigns.lua
│   │       │   ├── lazy.lua
│   │       │   ├── lspconfig.lua
│   │       │   ├── mason.lua
│   │       │   ├── nvim-lint.lua
│   │       │   ├── nvim-tree.lua
│   │       │   └── treesitter.lua
│   │       ├── mappings.lua
│   │       ├── options.lua
│   │       └── plugins
│   │           └── init.lua
│   ├── wezterm
│   │   └── wezterm.lua
│   └── starship.toml
├── scripts
│   ├── detect_environment.sh
│   ├── install_dependencies.sh
│   ├── install_chezmoi.sh
│   ├── setup_ssh.sh
│   ├── init_dotfiles.sh
│   ├── README.md
│   └── setup_environment.sh
├── setup.sh
└── environments
    ├── docker
    │   ├── README.md
    │   ├── ipad-host
    │   │   ├── Dockerfile
    │   │   └── docker-compose.yml
    │   └── common
    │       └── base-dependencies.sh
    └── macos
        ├── macos-keyboard-shortcuts.xml
        └── Raycast.rayconfig

```

`/root/Configs/README.md`:

```md
# Setup Scripts
Run the Gist, enter password, tap a few buttons, then voilà: everything is set up.

Scripts:
- Macbook
- Ipad Host

## Macbook
```bash
curl -s https://gist.githubusercontent.com/ViktorJT/d1d7d488057827ab16af656ce828b166/raw/macbook-install.sh | bash
```

#### Exporting Macbook configuration
1. Export custom mac keyboard shortcuts
```bash
defaults export com.apple.symbolichotkeys - > $HOME/Code/Configs/macos-keyboard-shortcuts.xml
```

2. Export Raycast preferences from app, then update file in $HOME/Code/Configs/raycast.Raycast.raycastconfig
```bash
Raycast Settings > Advanced > Import / Export > Export
```

## Ipad Host
```bash
curl -s https://gist.githubusercontent.com/ViktorJT/0beed64647d907bf721225fcd0d8c201/raw/ipad-host-install.sh | bash
```

### docker-compose.yml
```yml
version: "3.9"

services:
  dev:
    image: ubuntu:22.04
    container_name: dev-env
    hostname: dev-nas
    restart: unless-stopped
    tty: true
    stdin_open: true
    environment:
      - TZ=Europe/Stockholm
    volumes:
      - /volume1/docker/dev-env:/root
      - /volume1/projects:/projects
    ports:
      - "60000-61000:60000-61000/udp"  # Mosh default port range
    command: >
      bash -c "curl -fsSL https://gist.githubusercontent.com/ViktorJT/0beed64647d907bf721225fcd0d8c201/raw/ipad-host-install.sh | bash"
```
```

`/root/Configs/home/run_once_install-packages.sh.tmpl`:

```tmpl
#!/bin/bash

# This script runs once when chezmoi is applied on a new system
# It imports and runs environment-specific installation scripts

set -e  # Exit on error

# Print a nice header
echo "┌───────────────────────────────────────────┐"
echo "│ 🚀 Setting up environment-specific tools  │"
echo "└───────────────────────────────────────────┘"

# Get the source directory (repository root)
REPO_ROOT="{{ .chezmoi.sourceDir }}"
ENVIRONMENTS_DIR="$REPO_ROOT/../environments"

# Function to safely source a script if it exists
source_if_exists() {
  local script_path="$1"
  if [ -f "$script_path" ]; then
    echo "📦 Sourcing: $script_path"
    source "$script_path"
    return 0
  else
    echo "⚠️ Script not found: $script_path"
    return 1
  fi
}

# Function to safely execute a script if it exists
execute_if_exists() {
  local script_path="$1"
  if [ -f "$script_path" ]; then
    echo "📦 Executing: $script_path"
    bash "$script_path"
    return 0
  else
    echo "⚠️ Script not found: $script_path"
    return 1
  fi
}

{{- if .data.docker }}
#
# Docker Environment Setup
#
echo "🐳 Setting up Docker environment..."

# First source common Docker dependencies if they exist
source_if_exists "$ENVIRONMENTS_DIR/docker/common/base-dependencies.sh"

# Detect Docker container type
CONTAINER_TYPE="{{ .data.dockerType | default "dev" }}"
echo "🔍 Detected Docker container type: $CONTAINER_TYPE"

# Source container-specific dependencies
source_if_exists "$ENVIRONMENTS_DIR/docker/$CONTAINER_TYPE/dependencies.sh"

# Execute any container-specific post-setup steps
execute_if_exists "$ENVIRONMENTS_DIR/docker/$CONTAINER_TYPE/post-setup.sh"

{{- else if .data.macos }}
#
# macOS Environment Setup
#
echo "🍎 Setting up macOS environment..."

# Source the dependencies script
source_if_exists "$ENVIRONMENTS_DIR/macos/dependencies.sh"

# Run macOS system defaults setup
execute_if_exists "$ENVIRONMENTS_DIR/macos/defaults.sh"

{{- else }}
#
# Linux Environment Setup (for future use)
#
echo "🐧 Setting up Linux environment..."

# Source the dependencies script
source_if_exists "$ENVIRONMENTS_DIR/linux/dependencies.sh"

# Run any post-installation steps
execute_if_exists "$ENVIRONMENTS_DIR/linux/post-install.sh"

{{- end }}

# Common post-installation steps
echo "✅ Environment setup complete!"

```

`/root/Configs/home/nvim/LICENSE`:

```
This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <https://unlicense.org>

```

`/root/Configs/home/nvim/README.md`:

```md
**This repo is supposed to used as config by NvChad users!**

- The main nvchad repo (NvChad/NvChad) is used as a plugin by this repo.
- So you just import its modules , like `require "nvchad.options" , require "nvchad.mappings"`
- So you can delete the .git from this repo ( when you clone it locally ) or fork it :)

# Credits

1) Lazyvim starter https://github.com/LazyVim/starter as nvchad's starter was inspired by Lazyvim's . It made a lot of things easier!

```

`/root/Configs/home/nvim/init.lua`:

```lua
vim.g.base46_cache = vim.fn.stdpath "data" .. "/base46/"
vim.g.mapleader = " "

-- bootstrap lazy and all plugins
local lazypath = vim.fn.stdpath "data" .. "/lazy/lazy.nvim"

if not vim.uv.fs_stat(lazypath) then
  local repo = "https://github.com/folke/lazy.nvim.git"
  vim.fn.system { "git", "clone", "--filter=blob:none", repo, "--branch=stable", lazypath }
end

vim.opt.rtp:prepend(lazypath)

local lazy_config = require "configs.lazy"

-- load plugins
require("lazy").setup({
  {
    "NvChad/NvChad",
    lazy = false,
    branch = "v2.5",
    import = "nvchad.plugins",
  },

  { import = "plugins" },
}, lazy_config)

-- load theme
dofile(vim.g.base46_cache .. "defaults")
dofile(vim.g.base46_cache .. "statusline")

require "options"
require "nvchad.autocmds"

vim.schedule(function()
  require "mappings"
end)

```

`/root/Configs/home/nvim/lazy-lock.json`:

```json
{
  "LuaSnip": { "branch": "master", "commit": "c9b9a22904c97d0eb69ccb9bab76037838326817" },
  "NvChad": { "branch": "v2.5", "commit": "6f25b2739684389ca69ea8229386c098c566c408" },
  "base46": { "branch": "v2.5", "commit": "fde7a2cd54599e148d376f82980407c2d24b0fa2" },
  "cmp-buffer": { "branch": "main", "commit": "3022dbc9166796b644a841a02de8dd1cc1d311fa" },
  "cmp-nvim-lsp": { "branch": "main", "commit": "99290b3ec1322070bcfb9e846450a46f6efa50f0" },
  "cmp-nvim-lua": { "branch": "main", "commit": "f12408bdb54c39c23e67cab726264c10db33ada8" },
  "cmp-path": { "branch": "main", "commit": "91ff86cd9c29299a64f968ebb45846c485725f23" },
  "cmp_luasnip": { "branch": "master", "commit": "98d9cb5c2c38532bd9bdb481067b20fea8f32e90" },
  "conform.nvim": { "branch": "master", "commit": "8ed162b0637d4c4f69ebe3e8e49b35662a82e137" },
  "friendly-snippets": { "branch": "main", "commit": "efff286dd74c22f731cdec26a70b46e5b203c619" },
  "gitsigns.nvim": { "branch": "main", "commit": "8b00147519d6f8353867d5d0b55f587306b0cfb6" },
  "indent-blankline.nvim": { "branch": "master", "commit": "e10626f7fcd51ccd56d7ffc00883ba7e0aa28f78" },
  "lazy.nvim": { "branch": "main", "commit": "ac21a639c7ecfc8b822dcc9455deceea3778f839" },
  "mason.nvim": { "branch": "main", "commit": "f9f3b464dda319288b8ce592e53f0d9cf9ca8b4e" },
  "menu": { "branch": "main", "commit": "7769b17c2a131108c02b10e9f844e504aa605cc2" },
  "minty": { "branch": "main", "commit": "6dce9f097667862537823d515a0250ce58faab05" },
  "nvim-autopairs": { "branch": "master", "commit": "68f0e5c3dab23261a945272032ee6700af86227a" },
  "nvim-cmp": { "branch": "main", "commit": "12509903a5723a876abd65953109f926f4634c30" },
  "nvim-lint": { "branch": "master", "commit": "6e9dd545a1af204c4022a8fcd99727ea41ffdcc8" },
  "nvim-lspconfig": { "branch": "master", "commit": "7af2c37192deae28d1305ae9e68544f7fb5408e1" },
  "nvim-tree.lua": { "branch": "master", "commit": "80523101f0ae48b7f1990e907b685a3d79776c01" },
  "nvim-treesitter": { "branch": "master", "commit": "00a513f87ee3c339c2024b08db3eb63ba7736ed6" },
  "nvim-web-devicons": { "branch": "master", "commit": "1020869742ecb191f260818234517f4a1515cfe8" },
  "plenary.nvim": { "branch": "master", "commit": "857c5ac632080dba10aae49dba902ce3abf91b35" },
  "telescope.nvim": { "branch": "master", "commit": "78857db9e8d819d3cc1a9a7bdc1d39d127a36495" },
  "ts-comments.nvim": { "branch": "main", "commit": "872dcfa0418f4a33b7437fb4d9f4e89f2f000d74" },
  "ui": { "branch": "v3.0", "commit": "f5576f0499d0a7bf053991cba4564d73a55af875" },
  "volt": { "branch": "main", "commit": "3bedb1576db574af160643eea7df3b09dbe5ee9c" },
  "which-key.nvim": { "branch": "main", "commit": "5bf7a73fe851896d5ac26d313db849bf00f45b78" }
}

```

`/root/Configs/home/nvim/lua/chadrc.lua`:

```lua
-- This file needs to have same structure as nvconfig.lua
-- https://github.com/NvChad/ui/blob/v2.5/lua/nvconfig.lua

---@type ChadrcConfig
local M = {}

M.base46 = {
  theme = "nord",

  hl_override = {
    Comment = { italic = true },
    ["@comment"] = { italic = true },
  },
}

M.nvdash = {
  load_on_startup = true,
  header = {
    "   ⣴⣶⣤⡤⠦⣤⣀⣤⠆     ⣈⣭⣿⣶⣿⣦⣼⣆          ",
    "    ⠉⠻⢿⣿⠿⣿⣿⣶⣦⠤⠄⡠⢾⣿⣿⡿⠋⠉⠉⠻⣿⣿⡛⣦       ",
    "          ⠈⢿⣿⣟⠦ ⣾⣿⣿⣷    ⠻⠿⢿⣿⣧⣄     ",
    "           ⣸⣿⣿⢧ ⢻⠻⣿⣿⣷⣄⣀⠄⠢⣀⡀⠈⠙⠿⠄    ",
    "          ⢠⣿⣿⣿⠈    ⣻⣿⣿⣿⣿⣿⣿⣿⣛⣳⣤⣀⣀   ",
    "   ⢠⣧⣶⣥⡤⢄ ⣸⣿⣿⠘  ⢀⣴⣿⣿⡿⠛⣿⣿⣧⠈⢿⠿⠟⠛⠻⠿⠄  ",
    "  ⣰⣿⣿⠛⠻⣿⣿⡦⢹⣿⣷   ⢊⣿⣿⡏  ⢸⣿⣿⡇ ⢀⣠⣄⣾⠄   ",
    " ⣠⣿⠿⠛ ⢀⣿⣿⣷⠘⢿⣿⣦⡀ ⢸⢿⣿⣿⣄ ⣸⣿⣿⡇⣪⣿⡿⠿⣿⣷⡄  ",
    " ⠙⠃   ⣼⣿⡟  ⠈⠻⣿⣿⣦⣌⡇⠻⣿⣿⣷⣿⣿⣿ ⣿⣿⡇ ⠛⠻⢷⣄ ",
    "      ⢻⣿⣿⣄   ⠈⠻⣿⣿⣿⣷⣿⣿⣿⣿⣿⡟ ⠫⢿⣿⡆     ",
    "       ⠻⣿⣿⣿⣿⣶⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⡟⢀⣀⣤⣾⡿⠃     ",
    "                                   ",
    "                                   ",
  },
}

M.ui = {
  theme = "nord",

  statusline = {
    theme = "default",
    separator_style = "round",
  },

  tabufline = {
    enabled = false,
  },

  -- term = {
  -- enabled = false,
  -- },
}

return M

```

`/root/Configs/home/nvim/lua/configs/comment.lua`:

```lua
return {
  -- ignore = "^$", -- ignore empty lines
  -- pre_hook = require("ts_context_commentstring.integrations.comment_nvim").create_pre_hook,
}

```

`/root/Configs/home/nvim/lua/configs/commentstring.lua`:

```lua
return {
  enable_autocmd = false,
}

```

`/root/Configs/home/nvim/lua/configs/conform.lua`:

```lua
local options = {
  formatters_by_ft = {
    lua = { "stylua" },

    vue = {
      "eslint_d", -- Necessary for Planhat setup
      "prettierd",
      "prettier",
      stop_after_first = true,
    },

    javascript = {
      "eslint_d", -- Necessary for Planhat setup
      "prettierd",
      "prettier",
      stop_after_first = true,
    },
    javascriptreact = {
      "eslint_d", -- Necessary for Planhat setup
      "prettierd",
      "prettier",
      stop_after_first = true,
    },
    ["javascript.jsx"] = {
      "eslint_d", -- Necessary for Planhat setup
      "prettierd",
      "prettier",
      stop_after_first = true,
    },

    typescript = {
      "eslint_d", -- Necessary for Planhat setup
      "prettierd",
      "prettier",
      stop_after_first = true,
    },
    typescriptreact = {
      "eslint_d", -- Necessary for Planhat setup
      "prettierd",
      "prettier",
      stop_after_first = true,
    },
    ["typescript.tsx"] = {
      "eslint_d", -- Necessary for Planhat setup
      "prettierd",
      "prettier",
      stop_after_first = true,
    },

    css = { "prettierd", "prettier", stop_after_first = true },
    html = { "prettierd", "prettier", stop_after_first = true },
    json = { "prettierd", "prettier", stop_after_first = true },
    graphql = { "prettierd", "prettier", stop_after_first = true },
  },

  format_on_save = {
    -- These options will be passed to conform.format()
    timeout_ms = 10000,
    lsp_fallback = true,
  },
}

return options

```

`/root/Configs/home/nvim/lua/configs/gitsigns.lua`:

```lua
local options = {
  current_line_blame = true, -- Toggle with `:Gitsigns toggle_current_line_blame`
  current_line_blame_opts = {
    virt_text = true,
    virt_text_pos = "eol", -- 'eol' | 'overlay' | 'right_align'
    delay = 0,
    ignore_whitespace = false,
    virt_text_priority = 100,
  },
  current_line_blame_formatter = " <author>, <author_time:%R> - <summary>",
}

return options


```

`/root/Configs/home/nvim/lua/configs/lazy.lua`:

```lua
return {
  defaults = { lazy = true },
  install = { colorscheme = { "nvchad" } },

  ui = {
    icons = {
      ft = "",
      lazy = "󰂠 ",
      loaded = "",
      not_loaded = "",
    },
  },

  performance = {
    rtp = {
      disabled_plugins = {
        "2html_plugin",
        "tohtml",
        "getscript",
        "getscriptPlugin",
        "gzip",
        "logipat",
        "netrw",
        "netrwPlugin",
        "netrwSettings",
        "netrwFileHandlers",
        "matchit",
        "tar",
        "tarPlugin",
        "rrhelper",
        "spellfile_plugin",
        "vimball",
        "vimballPlugin",
        "zip",
        "zipPlugin",
        "tutor",
        "rplugin",
        "syntax",
        "synmenu",
        "optwin",
        "compiler",
        "bugreport",
        "ftplugin",
      },
    },
  },
}

```

`/root/Configs/home/nvim/lua/configs/lspconfig.lua`:

```lua
-- load defaults i.e lua_lsp
require("nvchad.configs.lspconfig").defaults()

local lspconfig = require "lspconfig"

local servers = { "eslint", "html", "cssls", "lua_ls", "tailwindcss", "volar" }
local nvlsp = require "nvchad.configs.lspconfig"

-- lsps with default config
for _, lsp in ipairs(servers) do
  lspconfig[lsp].setup {
    on_attach = nvlsp.on_attach,
    on_init = nvlsp.on_init,
    capabilities = nvlsp.capabilities,
  }
end

local mason_registry = require "mason-registry"
local typescript_plugin_path = mason_registry.get_package("vue-language-server"):get_install_path()
  .. "/node_modules/@vue/language-server/node_modules/@vue/typescript-plugin"

-- configuring single server, example: typescript
lspconfig.ts_ls.setup {
  on_attach = nvlsp.on_attach,
  capabilities = nvlsp.capabilities,
  init_options = {
    preferences = {
      disableSuggestions = true,
    },
    plugins = {
      {
        name = "@vue/typescript-plugin",
        location = typescript_plugin_path,
        languages = { "vue" },
      },
    },
  },
  filetypes = {
    "javascript",
    "javascriptreact",
    "javascript.jsx",
    "typescript",
    "typescriptreact",
    "typescript.tsx",
    "vue",
  },
}

```

`/root/Configs/home/nvim/lua/configs/mason.lua`:

```lua
local opts = {
  ensure_installed = {
    -- lua stuff
    "lua-language-server",
    "stylua",

    -- web dev stuff
    "css-lsp",
    "html-lsp",
    "typescript-language-server",
    "tailwindcss-language-server",
    "prettier",
    "prettierd",
    "eslint-lsp",
    "eslint_d",
  },
}

return opts

```

`/root/Configs/home/nvim/lua/configs/nvim-lint.lua`:

```lua
local opts = {
  events = { "BufWritePost", "BufReadPost", "InsertLeave" },
  linters_by_ft = {
    javascript = {
      "eslint_d",
      -- "eslint",
    },
    javascriptreact = {
      "eslint_d",
      -- "eslint",
    },
    ["javascript.jsx"] = {
      "eslint_d",
      -- "eslint",
    },

    typescript = {
      "eslint_d",
      -- "eslint",
    },
    typescriptreact = {
      "eslint_d",
      -- "eslint",
    },
    ["typescript.tsx"] = {
      "eslint_d",
      -- "eslint",
    },

    vue = {
      "eslint_d",
      -- "eslint",
    },
  },
}

return opts

-- local lint = require "lint"
-- local lint_augroup = vim.api.nvim_create_augroup("lint", { clear = true })
--
-- vim.api.nvim_create_autocmd({ "BufEnter", "BufWritePost", "InsertLeave" }, {
--   group = lint_augroup,
--   callback = function()
--     lint.try_lint()
--   end,
-- })

```

`/root/Configs/home/nvim/lua/configs/nvim-tree.lua`:

```lua
local opts = {
  view = {
    adaptive_size = true,
  },
  renderer = {
    icons = {
      glyphs = {
        folder = {
          open = "",
        },
      },
    },
  },
}

return opts


```

`/root/Configs/home/nvim/lua/configs/treesitter.lua`:

```lua
local opts = {
  ensure_installed = {
    "vim",
    "lua",
    "html",
    "css",
    "vue",
    "svelte",
    "javascript",
    "typescript",
    "tsx",
    "json",
    "markdown",
    "markdown_inline",
    "vimdoc",
  },
}

return opts


```

`/root/Configs/home/nvim/lua/mappings.lua`:

```lua
require "nvchad.mappings"

local map = vim.keymap.set

map("n", ";", ":", { desc = "CMD enter command mode" })

map("n", "<leader>x", ":close<CR>", { desc = "Close window" })

map("n", "<leader>v", ":vsplit<CR>", { desc = "Split window vertically" })
map("n", "<leader>h", ":split<CR>", { desc = "Split window horizontally" })

map("n", "<C-d>", "<C-d>zz", { desc = "Move down half-page" })
map("n", "<C-u>", "<C-u>zz", { desc = "Move up half-page" })

map("i", "jk", "<ESC>")
map("i", "<C-s>", "<Esc>:w<CR>", { desc = "Save file in insert mode" })

map("v", "J", ":m '>+1<CR>gv=gv", { desc = "Move line down" })
map("v", "K", ":m '<-2<CR>gv=gv", { desc = "Move line up" })

-- Disable default terminal mapping
map("n", "<D-M-i>", "<nop>", { desc = "Disable default terminal" })
map("t", "<D-M-i>", "<nop>", { desc = "Disable default terminal" })

```

`/root/Configs/home/nvim/lua/options.lua`:

```lua
require "nvchad.options"

-- 'Hybrid' line numbers (relative + current line)
vim.wo.number = true
vim.wo.relativenumber = true

vim.opt.scrolloff = 8 -- Set padding when scrolling

```

`/root/Configs/home/nvim/lua/plugins/init.lua`:

```lua
return {
  {
    "stevearc/conform.nvim",
    event = "BufWritePre",
    opts = require "configs.conform",
  },

  {
    "folke/ts-comments.nvim",
    event = "VeryLazy",
    opts = {},
  },

  {
    "mfussenegger/nvim-lint",
    opts = require "configs.nvim-lint",
  },

  {
    "nvim-tree/nvim-tree.lua",
    cmd = { "NvimTreeToggle", "NvimTreeFocus" },
    opts = require "configs.nvim-tree",
  },

  {
    "neovim/nvim-lspconfig",
    config = function()
      require "configs.lspconfig"
    end,
  },

  {
    "nvim-treesitter/nvim-treesitter",
    opts = require "configs.treesitter",
  },

  {
    "williamboman/mason.nvim",
    opts = require "configs.mason",
  },

  {
    "lewis6991/gitsigns.nvim",
    opts = require "configs.gitsigns",
  },
}

```

`/root/Configs/home/wezterm/wezterm.lua`:

```lua
local wezterm = require("wezterm")
local act = wezterm.action

-- Set default padding
local default_padding = {
	left = 8,
	right = 8,
	top = 8,
	bottom = 8,
}

-- Set padding for Neovim (i.e., no padding)
local nvim_padding = {
	left = 0,
	right = 0,
	top = 0,
	bottom = 0,
}

wezterm.on("update-right-status", function(window, pane)
	-- Get the current process name
	local process_name = pane:get_foreground_process_name()

	-- Check if Neovim is running in the active pane
	if process_name and process_name:find("nvim") then
		-- Remove padding when Neovim is detected
		window:set_config_overrides({
			window_padding = nvim_padding,
		})
	else
		-- Restore default padding when not in Neovim
		window:set_config_overrides({
			window_padding = default_padding,
		})
	end
end)

return {
	color_scheme = "nord",
	font = wezterm.font("VictorMono Nerd Font", { weight = "Regular", italic = false }),

	adjust_window_size_when_changing_font_size = false,

	font_size = 14.0,

	hide_tab_bar_if_only_one_tab = true,

	native_macos_fullscreen_mode = true,

	window_padding = {
		left = 0,
		right = 0,
		top = 0,
		bottom = 0,
	},

	inactive_pane_hsb = {
		-- NOTE: these values are multipliers, applied on normal pane values
		saturation = 0.5,
		brightness = 0.8,
	},

	keys = {
		{
			key = "f",
			mods = "CMD|CTRL",
			action = act.ToggleFullScreen,
		},
		{
			key = "[",
			mods = "CMD",
			action = act.ActivatePaneDirection("Left"),
		},
		{
			key = "]",
			mods = "CMD",
			action = act.ActivatePaneDirection("Right"),
		},
		{
			key = "d",
			mods = "CMD",
			action = act.SplitHorizontal({ domain = "CurrentPaneDomain" }),
		},
		{
			key = "d",
			mods = "CMD|SHIFT",
			action = act.SplitVertical({ domain = "CurrentPaneDomain" }),
		},
		{
			key = "w",
			mods = "CMD",
			action = act.CloseCurrentPane({ confirm = false }),
		},

		-- Conform to Mac shortcuts for text navigation ([forward | backward] [word | line])
		-- There are better ways to do this, see copyMode in Wezterm docs
		{
			key = "LeftArrow",
			mods = "OPT",
			action = wezterm.action({ SendString = "\x1bb" }),
		},
		{
			key = "RightArrow",
			mods = "OPT",
			action = wezterm.action({ SendString = "\x1bf" }),
		},

		{
			key = "LeftArrow",
			mods = "CMD",
			action = wezterm.action({ SendString = "\x1bOH" }),
		},
		{
			key = "RightArrow",
			mods = "CMD",
			action = wezterm.action({ SendString = "\x1bOF" }),
		},
	},
}

```

`/root/Configs/home/starship.toml`:

```toml
format = """
[](#4C566A)\
$time\
[](bg:#434C5E fg:#4C566A)\
$directory\
[](fg:#434C5E bg:#3B4252)\
$git_branch\
$git_status\
[](fg:#3B4252 bg:#2E3440)\
"""
right_format = """$nodejs"""
command_timeout = 1000

[directory]
style = "bg:#434C5E"
format = "[ $path ]($style)"
truncation_length = 3
truncation_symbol = "…/"

[git_branch]
symbol = ""
style = "bg:#3B4252"
format = '[ $symbol $branch ]($style)'

[git_status]
style = "bg:#3B4252"
format = '[$all_status$ahead_behind ]($style)'

[nodejs]
symbol = ""
style = "bg:#2E3440 #4C566A"
format = '[ $symbol ($version) ]($style)'

[time]
disabled = false
time_format = "%R" # Hour:Minute Format
style = "bg:#4C566A"
format = '[ $time ]($style)'

```

`/root/Configs/scripts/detect_environment.sh`:

```sh
#!/bin/bash

# Script to detect the current environment

detect_environment() {
  echo "🔍 Detecting environment..."
  
  # Define variables to hold environment information
  export ENV_NAME=""
  export ENV_TYPE=""
  export PKG_MANAGER=""
  export USE_SUDO=true
  
  # Check if we're in a Docker container
  if [ -f /.dockerenv ] || grep -q docker /proc/1/cgroup 2>/dev/null; then
    ENV_NAME="Docker"
    ENV_TYPE="linux"
    USE_SUDO=false
    echo "🐳 Docker environment detected"
  elif [[ "$OSTYPE" == "darwin"* ]]; then
    ENV_NAME="macOS"
    ENV_TYPE="darwin"
    PKG_MANAGER="brew"
    echo "🍎 macOS environment detected"
  elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
    ENV_NAME="Linux"
    ENV_TYPE="linux"
    
    # Detect Linux distribution
    if [ -f /etc/debian_version ]; then
      echo "🐧 Debian/Ubuntu Linux detected"
      PKG_MANAGER="apt"
    elif [ -f /etc/fedora-release ]; then
      echo "🐧 Fedora Linux detected"
      PKG_MANAGER="dnf"
    elif [ -f /etc/arch-release ]; then
      echo "🐧 Arch Linux detected"
      PKG_MANAGER="pacman"
    else
      echo "🐧 Generic Linux detected, will try to determine package manager"
      if command -v apt &>/dev/null; then
        PKG_MANAGER="apt"
      elif command -v dnf &>/dev/null; then
        PKG_MANAGER="dnf"
      elif command -v pacman &>/dev/null; then
        PKG_MANAGER="pacman"
      else
        echo "❌ Could not determine package manager. Please install dependencies manually."
        PKG_MANAGER="unknown"
      fi
    fi
  else
    echo "⚠️ Unknown environment: $OSTYPE"
    ENV_NAME="Unknown"
    ENV_TYPE="unknown"
  fi
  
  echo "✅ Environment detected as: $ENV_NAME using ${PKG_MANAGER:-'no package manager'}"
}

```

`/root/Configs/scripts/install_dependencies.sh`:

```sh
#!/bin/bash

# Script to install core dependencies

install_dependencies() {
  echo "📦 Installing core dependencies..."
  
  # First, check for chezmoi - if already installed, skip this step
  if command -v chezmoi &>/dev/null; then
    echo "✅ Chezmoi already installed, skipping dependencies installation"
    return 0
  fi
  
  # Install git if not available
  if ! command -v git &>/dev/null; then
    echo "Installing git..."
    case $PKG_MANAGER in
      brew)
        brew install git
        ;;
      apt)
        $([[ $USE_SUDO == true ]] && echo "sudo" || echo "") apt update
        $([[ $USE_SUDO == true ]] && echo "sudo" || echo "") apt install -y git
        ;;
      dnf)
        $([[ $USE_SUDO == true ]] && echo "sudo" || echo "") dnf install -y git
        ;;
      pacman)
        $([[ $USE_SUDO == true ]] && echo "sudo" || echo "") pacman -Sy --noconfirm git
        ;;
      *)
        echo "⚠️ Unknown package manager. Please install git manually."
        ;;
    esac
  fi
  
  # Install curl if not available
  if ! command -v curl &>/dev/null; then
    echo "Installing curl..."
    case $PKG_MANAGER in
      brew)
        brew install curl
        ;;
      apt)
        $([[ $USE_SUDO == true ]] && echo "sudo" || echo "") apt update
        $([[ $USE_SUDO == true ]] && echo "sudo" || echo "") apt install -y curl
        ;;
      dnf)
        $([[ $USE_SUDO == true ]] && echo "sudo" || echo "") dnf install -y curl
        ;;
      pacman)
        $([[ $USE_SUDO == true ]] && echo "sudo" || echo "") pacman -Sy --noconfirm curl
        ;;
      *)
        echo "⚠️ Unknown package manager. Please install curl manually."
        ;;
    esac
  fi
  
  # Install zsh if not available
  if ! command -v zsh &>/dev/null; then
    echo "Installing zsh..."
    case $PKG_MANAGER in
      brew)
        brew install zsh
        ;;
      apt)
        $([[ $USE_SUDO == true ]] && echo "sudo" || echo "") apt update
        $([[ $USE_SUDO == true ]] && echo "sudo" || echo "") apt install -y zsh
        ;;
      dnf)
        $([[ $USE_SUDO == true ]] && echo "sudo" || echo "") dnf install -y zsh
        ;;
      pacman)
        $([[ $USE_SUDO == true ]] && echo "sudo" || echo "") pacman -Sy --noconfirm zsh
        ;;
      *)
        echo "⚠️ Unknown package manager. Please install zsh manually."
        ;;
    esac
  fi
  
  echo "✅ Core dependencies installed"
}

```

`/root/Configs/scripts/install_chezmoi.sh`:

```sh
#!/bin/bash

# Script to install chezmoi

install_chezmoi() {
  if command -v chezmoi &>/dev/null; then
    echo "✅ Chezmoi already installed"
  else
    echo "📦 Installing Chezmoi..."
    
    case $ENV_TYPE in
      darwin)
        if command -v brew &>/dev/null; then
          brew install chezmoi
        else
          echo "🍺 Installing Homebrew first..."
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          brew install chezmoi
        fi
        ;;
      *)
        # Universal install method
        sh -c "$(curl -fsLS get.chezmoi.io)" -- -b $([[ $USE_SUDO == true ]] && echo "/usr/local/bin" || echo "$HOME/.local/bin")
        
        # Add to PATH if installed to ~/.local/bin
        if [[ $USE_SUDO == false ]]; then
          export PATH="$HOME/.local/bin:$PATH"
        fi
        ;;
    esac
  fi
  
  # Verify installation
  if command -v chezmoi &>/dev/null; then
    echo "✅ Chezmoi installed successfully"
    chezmoi --version
  else
    echo "❌ Failed to install Chezmoi"
    exit 1
  fi
}

```

`/root/Configs/scripts/setup_ssh.sh`:

```sh
#!/bin/bash

# Script to set up SSH keys for GitHub

setup_ssh_key() {
  # Determine home directory
  HOME_DIR=$HOME
  SSH_DIR="$HOME_DIR/.ssh"
  
  # Create .ssh directory if it doesn't exist
  mkdir -p "$SSH_DIR"
  chmod 700 "$SSH_DIR"
  
  if [[ ! -f "$SSH_DIR/id_ed25519" ]]; then
    echo "🔑 No SSH key found. Let's generate one!"
    
    # Loop until a valid name is entered
    while true; do
      echo -n "Enter a name for this SSH key (e.g., 'macbook-pro'): "
      read ssh_key_label
      
      # Check if input is empty
      if [[ -z "$ssh_key_label" ]]; then
        echo "❌ Error: SSH key name cannot be empty. Please enter a valid name."
        continue
      fi
      
      # Check if input contains only valid characters
      if [[ ! "$ssh_key_label" =~ ^[a-zA-Z0-9_-]+$ ]]; then
        echo "❌ Error: SSH key name can only contain letters, numbers, dashes (-), and underscores (_)."
        continue
      fi
      
      # If input is valid, break out of the loop
      break
    done
    
    # Generate SSH key with the validated label
    ssh-keygen -t ed25519 -C "$ssh_key_label" -f "$SSH_DIR/id_ed25519" -N ""
    
    # Fix permissions
    chmod 600 "$SSH_DIR/id_ed25519"
    
    echo "✅ SSH key successfully created!"
    
    echo "🔓 Your public key:"
    cat "$SSH_DIR/id_ed25519.pub"
    
    # Try to copy to clipboard based on OS
    if [[ "$ENV_TYPE" == "darwin" ]]; then
      pbcopy < "$SSH_DIR/id_ed25519.pub"
      echo "📋 SSH key copied to clipboard!"
    elif command -v xclip &>/dev/null; then
      xclip -selection clipboard < "$SSH_DIR/id_ed25519.pub"
      echo "📋 SSH key copied to clipboard!"
    elif command -v wl-copy &>/dev/null; then
      wl-copy < "$SSH_DIR/id_ed25519.pub"
      echo "📋 SSH key copied to clipboard!"
    else
      echo "⚠️ Clipboard copy not supported on this system. Manually copy the key above."
    fi
    
    echo "📌 Add your SSH key to GitHub: https://github.com/settings/keys"
    read -p "Press Enter once you've added the SSH key to GitHub (or type 'skip' to continue without verification): " verify_choice
    
    if [[ "$verify_choice" != "skip" ]]; then
      # Ensure GitHub is in known_hosts
      mkdir -p "$SSH_DIR"
      ssh-keyscan github.com >> "$SSH_DIR/known_hosts" 2>/dev/null
      
      echo "🔍 Testing SSH connection to GitHub..."
      if ssh -T git@github.com 2>&1 | grep -q "successfully authenticated"; then
        echo "✅ SSH authentication successful!"
      else
        echo "❌ SSH authentication failed."
        echo "Would you like to:"
        echo "1) Try again"
        echo "2) Use HTTPS instead of SSH"
        echo "3) Continue anyway"
        read -p "Enter your choice (1-3): " ssh_choice
        
        case $ssh_choice in
          1)
            # Recursive call to try again
            setup_ssh_key
            ;;
          2)
            echo "Switching to HTTPS authentication"
            export USE_HTTPS=true
            ;;
          3)
            echo "Continuing with setup..."
            ;;
          *)
            echo "Invalid choice. Continuing with setup..."
            ;;
        esac
      fi
    else
      echo "Skipping SSH verification..."
      export USE_HTTPS=true
    fi
  else
    echo "✅ SSH key already exists, skipping..."
    
    # Ask if they want to test the connection
    read -p "Would you like to test the SSH connection to GitHub? (y/n): " test_ssh
    if [[ "$test_ssh" == "y" ]]; then
      # Ensure GitHub is in known_hosts
      ssh-keyscan github.com >> "$SSH_DIR/known_hosts" 2>/dev/null
      
      echo "🔍 Testing SSH connection to GitHub..."
      if ssh -T git@github.com 2>&1 | grep -q "successfully authenticated"; then
        echo "✅ SSH authentication successful!"
      else
        echo "❌ SSH authentication failed."
        echo "Would you like to use HTTPS instead? (y/n): " use_https
        if [[ "$use_https" == "y" ]]; then
          export USE_HTTPS=true
        fi
      fi
    fi
  fi
}

```

`/root/Configs/scripts/init_dotfiles.sh`:

```sh
#!/bin/bash

# Script to initialize dotfiles with chezmoi

# Default dotfiles repository
DEFAULT_REPO="git@github.com:ViktorJT/dotfiles.git"
HTTPS_REPO="https://github.com/ViktorJT/dotfiles.git"

init_dotfiles() {
  if [ ! -d "$HOME/.local/share/chezmoi" ]; then
    echo "⚙ Initializing dotfiles..."
    
    # Ask for dotfiles repository
    read -p "Enter your dotfiles repository URL (Press Enter for default: $DEFAULT_REPO): " dotfiles_repo
    dotfiles_repo=${dotfiles_repo:-$DEFAULT_REPO}
    
    # Use HTTPS if SSH failed or was skipped
    if [[ "$USE_HTTPS" == true ]]; then
      echo "Using HTTPS authentication for GitHub"
      dotfiles_repo=$HTTPS_REPO
      chezmoi init "$dotfiles_repo"
    else
      chezmoi init "$dotfiles_repo" --ssh
    fi
    
    echo "🎨 Applying dotfiles..."
    chezmoi apply
  else
    echo "✅ Chezmoi already initialized!"
    
    echo "Would you like to update your dotfiles? (y/n): "
    read update_dotfiles
    
    if [[ "$update_dotfiles" == "y" ]]; then
      echo "🔄 Updating dotfiles..."
      chezmoi update
    fi
  fi
}

```

`/root/Configs/scripts/README.md`:

```md
# Setup Scripts

This directory contains modular scripts for setting up a development environment with chezmoi across different platforms.

## Scripts Overview

- `setup.sh` - Main script that orchestrates the setup process
- `detect_environment.sh` - Detects the current environment (macOS, Linux, Docker)
- `install_dependencies.sh` - Installs core dependencies based on the environment
- `install_chezmoi.sh` - Installs chezmoi
- `setup_ssh.sh` - Sets up SSH keys for GitHub authentication
- `init_dotfiles.sh` - Initializes dotfiles with chezmoi
- `setup_environment.sh` - Sets up environment-specific configurations

## One-Line Installation

Use the following command to set up your development environment:

```bash
curl -fsSL https://raw.githubusercontent.com/ViktorJT/dotfiles/main/setup.sh | bash
```

## Modular Structure Benefits

1. **Easier to maintain** - Each script has a single responsibility
2. **Better readability** - Shorter scripts are easier to understand
3. **Reusable components** - Scripts can be used independently
4. **Easier troubleshooting** - Problems can be isolated to specific scripts

## Directory Structure

These scripts should be placed in your dotfiles repository as follows:

```
dotfiles/
├── setup.sh              # Main entry point script
├── scripts/              # Directory for modular scripts
│   ├── detect_environment.sh
│   ├── install_dependencies.sh
│   ├── install_chezmoi.sh
│   ├── setup_ssh.sh
│   ├── init_dotfiles.sh
│   └── setup_environment.sh
├── home/                 # Dotfiles managed by chezmoi
│   └── ...
└── docker/               # Docker-related files
    ├── Dockerfile
    └── docker-compose.yml
```

## Development

To modify or add new functionality:

1. Edit the specific script that handles that functionality
2. If adding a new script, update `setup.sh` to include it
3. Test changes in different environments
4. Commit and push changes to your repository

```

`/root/Configs/scripts/setup_environment.sh`:

```sh
#!/bin/bash

# Script to set up environment-specific configurations

setup_environment_specific() {
  echo "🛠️ Setting up environment-specific configurations..."
  
  # Create or update chezmoi config with environment information
  cat > "$HOME/.chezmoi.toml.tmpl" << EOF
# ~/.chezmoi.toml.tmpl
{{- \$isDocker := false -}}
{{- \$dockerType := "" -}}
{{- \$isMacOS := false -}}
{{- \$isLinux := false -}}

{{- if eq .chezmoi.os "darwin" -}}
{{-   \$isMacOS = true -}}
{{- else if eq .chezmoi.os "linux" -}}
{{-   \$isLinux = true -}}
{{-   if (.chezmoi.kernel.osrelease | lower | contains "docker") -}}
{{-     \$isDocker = true -}}
{{-     /* Try to detect Docker container type */ -}}
{{-     if (.chezmoi.hostname | lower | contains "web") -}}
{{-       \$dockerType = "web" -}}
{{-     else if (.chezmoi.hostname | lower | contains "data") -}}
{{-       \$dockerType = "data-science" -}}
{{-     else -}}
{{-       \$dockerType = "dev" -}}
{{-     end -}}
{{-   end -}}
{{- end -}}

[data]
    docker = {{ \$isDocker }}
    dockerType = "{{ \$dockerType }}"
    macos = {{ \$isMacOS }}
    linux = {{ \$isLinux }}
    hostname = "{{ .chezmoi.hostname }}"
    username = "{{ .chezmoi.username }}"
    email = "youremail@example.com"  # Replace with your email
    name = "Your Name"  # Replace with your name
EOF
  
  echo "✅ Environment configuration set up!"
}

```

`/root/Configs/setup.sh`:

```sh
#!/bin/bash

###################
# --- WELCOME --- #
###################

: '
  Universal Setup Script
  
  ┌–– Overview –––––––––––––––––––––––––––––––––┐
  │                                             │
  │   - Detect environment                      │
  │   - Install dependencies                    │
  │   - Setup SSH key                           │
  │   - Init dotfiles with chezmoi              │
  │                                             │
  └–––––––––––––––––––––––––––––––––––––––––––––┘
'

# Define base URL for raw script downloads
SCRIPTS_URL="https://raw.githubusercontent.com/ViktorJT/dotfiles/main/scripts"

# Create temporary directory for scripts
TEMP_DIR=$(mktemp -d)
trap 'rm -rf "$TEMP_DIR"' EXIT

# Function to download a script
download_script() {
  local script_name=$1
  local output_path="$TEMP_DIR/$script_name"
  
  echo "📥 Downloading $script_name..."
  curl -fsSL "$SCRIPTS_URL/$script_name" -o "$output_path"
  chmod +x "$output_path"
  
  echo "$output_path"
}

# Main execution
main() {
  echo "🚀 Starting universal setup script"
  
  # Initialize variables
  export USE_HTTPS=false
  
  # Download and source environment detection script
  env_script=$(download_script "detect_environment.sh")
  source "$env_script"
  detect_environment
  
  # Download and source dependencies script
  deps_script=$(download_script "install_dependencies.sh")
  source "$deps_script"
  install_dependencies
  
  # Download and source chezmoi installation script
  chezmoi_script=$(download_script "install_chezmoi.sh")
  source "$chezmoi_script"
  install_chezmoi
  
  # Download and source SSH key setup script
  ssh_script=$(download_script "setup_ssh.sh")
  source "$ssh_script"
  setup_ssh_key
  
  # Download and source dotfiles initialization script
  dotfiles_script=$(download_script "init_dotfiles.sh")
  source "$dotfiles_script"
  init_dotfiles
  
  # Download and source environment-specific setup script
  env_specific_script=$(download_script "setup_environment.sh")
  source "$env_specific_script"
  setup_environment_specific
  
  echo
  echo "✅ Setup complete!"
  echo
  echo "📋 Some useful commands:"
  echo "  • chezmoi edit ~/.zshrc  - Edit your zsh config"
  echo "  • chezmoi apply          - Apply changes" 
  echo "  • chezmoi update         - Pull latest changes from repo"
  echo "  • chezmoi cd             - Go to your dotfiles directory"
  echo
  echo "🎉 Your development environment is ready!"
}

# Run the main function
main

```

`/root/Configs/environments/docker/README.md`:

```md
# Docker Development Environment for Synology NAS

This development environment is designed to run on a Synology NAS and be accessed via Mosh from an iPad Pro using Blink Shell.

## Features

- Ubuntu 22.04 base with development tools
- Zsh with Oh My Zsh
- Neovim
- Tmux
- Mosh for stable iPad connections
- NVM for Node.js management
- Starship prompt
- Chezmoi for dotfile management

## Setup Instructions

### 1. Prepare Your Environment

1. Upload the Dockerfile, docker-compose.yml, and setup.sh to your Synology NAS
2. Ensure Docker is installed on your Synology NAS

### 2. Build and Start the Container

```bash
# Navigate to the directory with your files
cd /volume1/docker/dev-env-setup

# Build and start the container
docker-compose up -d

# Enter the container
docker exec -it dev-env zsh
```

### 3. Run the Setup Script

Once inside the container, run:

```bash
/root/setup.sh
```

This will:
- Generate SSH keys (if needed)
- Help you configure GitHub access
- Initialize chezmoi with your dotfiles repository
- Apply your configurations

### 4. Connect from iPad Pro + Blink Shell

In Blink Shell:

1. Add a new host:
   - Host: Your Synology NAS IP
   - Port: 22 (SSH) or 60000-60010 (Mosh)
   - User: root

2. Connect using Mosh for a stable connection:
   ```
   mosh --port=60001 root@your-synology-ip
   ```

## Using Chezmoi

### Add New Dotfiles

```bash
# Add a file to be managed
chezmoi add ~/.config/some-config-file

# Edit a managed file
chezmoi edit ~/.config/some-config-file

# Apply changes
chezmoi apply
```

### Update From Your Repository

```bash
chezmoi update
```

### Create/Edit Template Files

Templates allow different settings based on the host machine:

```bash
chezmoi edit ~/.config/some-config.tmpl
```

Example template syntax:
```
{{- if .data.docker -}}
# Docker-specific settings
{{- else -}}
# Non-Docker settings
{{- end -}}
```

## Persistent Storage

Your development environment uses persistent storage at `/volume1/docker/dev-env` on your Synology NAS. This ensures:

- Your dotfiles remain between container restarts
- SSH keys are preserved
- Work in progress is saved

## Troubleshooting

### SSH Connection Issues

If you're having trouble connecting to GitHub:

```bash
ssh -vT git@github.com
```

### Container Access Issues

If you can't access the container:

```bash
# Check if container is running
docker ps | grep dev-env

# Check container logs
docker logs dev-env
```

### Mosh Connection Issues

If Mosh isn't connecting:

1. Ensure ports 60000-60010/UDP are open on your Synology firewall
2. Try specifying a specific port: `mosh --port=60001 root@your-synology-ip`

```

`/root/Configs/environments/docker/ipad-host/Dockerfile`:

```
# Base image: Lightweight Ubuntu
FROM ubuntu:22.04

# Set non-interactive mode to prevent prompts
ENV DEBIAN_FRONTEND=noninteractive

# Install system tools
RUN apt update && apt install -y \
    zsh git curl wget neovim tmux mosh fzf ripgrep \
    && apt clean

# Set Zsh as the default shell for root
RUN chsh -s $(which zsh) root

# Install NVM (Node Version Manager)
ENV NVM_DIR="/root/.nvm"
RUN curl -fsSL https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash

# Load NVM and install the latest LTS version of Node.js
RUN bash -c "source $NVM_DIR/nvm.sh && nvm install --lts && nvm use --lts"

# Install Starship prompt
RUN curl -fsSL https://starship.rs/install.sh | sh -s -- -y

# Install Oh My Zsh + Plugins
RUN rm -rf /root/.oh-my-zsh && \
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended && \
    mkdir -p /root/.oh-my-zsh/custom/plugins && \
    git clone https://github.com/zsh-users/zsh-autosuggestions /root/.oh-my-zsh/custom/plugins/zsh-autosuggestions && \
    git clone https://github.com/zsh-users/zsh-syntax-highlighting /root/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting

# Ensure .config directory exists before linking dotfiles
# RUN mkdir -p /root/.config && \
#     rm -rf /root/Configs && \
#     git clone https://github.com/ViktorJT/Configs.git /root/Configs && \
#     ln -sf /root/Configs/.zshrc /root/.zshrc && \
#     ln -sf /root/Configs/nvim /root/.config/nvim && \
#     ln -sf /root/Configs/starship.toml /root/.config/starship.toml
	
# Ensure NVM is loaded in every shell session
RUN echo 'export NVM_DIR="/root/.nvm"' >> /root/.zshrc && \
    echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> /root/.zshrc

# Set Zsh as the interactive shell
SHELL ["/usr/bin/zsh", "-c"]

# Start Zsh when entering the container
CMD ["zsh"]

```

`/root/Configs/environments/docker/ipad-host/docker-compose.yml`:

```yml
version: "3.9"
 
services:
  dev:
    build: .  # Builds from the Dockerfile in the current directory
    container_name: dev-env
    hostname: dev-nas
    restart: unless-stopped
    tty: true
    stdin_open: true
    network_mode: "host"  # Necessary for Synology NAS to avoid proxy issues
    volumes:
      - /volume1/docker/dev-env:/root  # Persistent home directory
      - /volume1/docker/dev-env/.ssh:/root/.ssh  # Persist SSH keys
    environment:
      - TERM=xterm-256color  # Better terminal support for Blink Shell
      - TZ=UTC  # Set your preferred timezone
    ports:
      - "60000-60010:60000-60010/udp"  # Mosh UDP port range

```

`/root/Configs/environments/docker/common/base-dependencies.sh`:

```sh
#!/bin/bash
# Common base dependencies for all Docker containers

# Ensure necessary directories exist
mkdir -p "$HOME/.config"
mkdir -p "$HOME/.local/bin"

# Install zsh plugins if not already present
if [ ! -d "$HOME/.oh-my-zsh/custom/plugins/zsh-autosuggestions" ]; then
  echo "📦 Installing zsh-autosuggestions plugin..."
  git clone https://github.com/zsh-users/zsh-autosuggestions "$HOME/.oh-my-zsh/custom/plugins/zsh-autosuggestions"
fi

if [ ! -d "$HOME/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting" ]; then
  echo "📦 Installing zsh-syntax-highlighting plugin..."
  git clone https://github.com/zsh-users/zsh-syntax-highlighting "$HOME/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting"
fi

# Install starship prompt if not already installed
if ! command -v starship &>/dev/null; then
  echo "📦 Installing Starship prompt..."
  curl -fsSL https://starship.rs/install.sh | sh -s -- -y
fi

# Configure git with safe defaults if not already configured
if ! git config --global user.name >/dev/null 2>&1; then
  echo "📦 Setting up basic Git configuration..."
  git config --global user.name "Viktor"
  git config --global user.email "v.jensentorp@gmail.com"
  git config --global core.editor "nvim"
  git config --global init.defaultBranch "main"
fi

# Ensure ZSH is the default shell
if [ "$SHELL" != "$(which zsh)" ]; then
  echo "🔄 Setting zsh as default shell..."
  chsh -s $(which zsh)
fi

echo "✅ Common Docker dependencies configured"

```

`/root/Configs/environments/macos/macos-keyboard-shortcuts.xml`:

```xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>AppleSymbolicHotKeys</key>
	<dict>
		<key>15</key>
		<dict>
			<key>enabled</key>
			<false/>
		</dict>
		<key>16</key>
		<dict>
			<key>enabled</key>
			<false/>
		</dict>
		<key>164</key>
		<dict>
			<key>enabled</key>
			<false/>
			<key>value</key>
			<dict>
				<key>parameters</key>
				<array>
					<integer>65535</integer>
					<integer>65535</integer>
					<integer>0</integer>
				</array>
				<key>type</key>
				<string>standard</string>
			</dict>
		</dict>
		<key>17</key>
		<dict>
			<key>enabled</key>
			<false/>
		</dict>
		<key>18</key>
		<dict>
			<key>enabled</key>
			<false/>
		</dict>
		<key>19</key>
		<dict>
			<key>enabled</key>
			<false/>
		</dict>
		<key>190</key>
		<dict>
			<key>enabled</key>
			<false/>
			<key>value</key>
			<dict>
				<key>parameters</key>
				<array>
					<integer>113</integer>
					<integer>12</integer>
					<integer>8388608</integer>
				</array>
				<key>type</key>
				<string>standard</string>
			</dict>
		</dict>
		<key>20</key>
		<dict>
			<key>enabled</key>
			<false/>
		</dict>
		<key>21</key>
		<dict>
			<key>enabled</key>
			<false/>
		</dict>
		<key>22</key>
		<dict>
			<key>enabled</key>
			<false/>
		</dict>
		<key>23</key>
		<dict>
			<key>enabled</key>
			<false/>
		</dict>
		<key>24</key>
		<dict>
			<key>enabled</key>
			<false/>
		</dict>
		<key>25</key>
		<dict>
			<key>enabled</key>
			<false/>
		</dict>
		<key>26</key>
		<dict>
			<key>enabled</key>
			<false/>
		</dict>
		<key>60</key>
		<dict>
			<key>enabled</key>
			<true/>
			<key>value</key>
			<dict>
				<key>parameters</key>
				<array>
					<integer>32</integer>
					<integer>49</integer>
					<integer>262144</integer>
				</array>
				<key>type</key>
				<string>standard</string>
			</dict>
		</dict>
		<key>61</key>
		<dict>
			<key>enabled</key>
			<true/>
			<key>value</key>
			<dict>
				<key>parameters</key>
				<array>
					<integer>32</integer>
					<integer>49</integer>
					<integer>1572864</integer>
				</array>
				<key>type</key>
				<string>standard</string>
			</dict>
		</dict>
		<key>64</key>
		<dict>
			<key>enabled</key>
			<false/>
			<key>value</key>
			<dict>
				<key>parameters</key>
				<array>
					<integer>32</integer>
					<integer>49</integer>
					<integer>1048576</integer>
				</array>
				<key>type</key>
				<string>standard</string>
			</dict>
		</dict>
		<key>65</key>
		<dict>
			<key>enabled</key>
			<false/>
			<key>value</key>
			<dict>
				<key>parameters</key>
				<array>
					<integer>32</integer>
					<integer>49</integer>
					<integer>1572864</integer>
				</array>
				<key>type</key>
				<string>standard</string>
			</dict>
		</dict>
		<key>79</key>
		<dict>
			<key>enabled</key>
			<true/>
		</dict>
		<key>80</key>
		<dict>
			<key>enabled</key>
			<true/>
		</dict>
		<key>81</key>
		<dict>
			<key>enabled</key>
			<true/>
		</dict>
		<key>82</key>
		<dict>
			<key>enabled</key>
			<true/>
		</dict>
	</dict>
</dict>
</plist>

```